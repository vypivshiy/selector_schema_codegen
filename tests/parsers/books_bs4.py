# Auto generated code by ssc_gen
# WARNING: Any manual changes made to this file will be lost when this
# is run again. Do not edit this file unless you know what you are doing.

from __future__ import annotations  # python 3.7, 3.8 comp
import re
from typing import Any, Union

from bs4 import BeautifulSoup, Tag, ResultSet

_T_DICT_ITEM = dict[str, Union[str, list[str]]]
_T_LIST_ITEMS = list[dict[str, Union[str, list[str]]]]


class _BaseStructParser:
    # TODO: add kwargs for config selector
    def __init__(self, document: str):
        self.__raw__ = document
        self.__selector__ = BeautifulSoup(document, "lxml")
        self._cached_result: Union[_T_DICT_ITEM, _T_LIST_ITEMS] = {}

    def _pre_validate(self, document: BeautifulSoup) -> None:
        # pre validate entrypoint, contain assert expressions
        pass

    def parse(self):
        """run parser"""
        self._pre_validate(self.__selector__)
        self._start_parse()
        return self

    def view(self) -> Union[_T_DICT_ITEM, _T_LIST_ITEMS]:
        """get parsed values"""
        return self._cached_result

    def _start_parse(self):
        """parse logic entrypoint"""
        pass


class Book(_BaseStructParser):
    """sample docstring

        test 123

        - okay

        Book view() item signature:

    {
        "description": "String",
        "title": "String",
        "price": "String",
        "upc": "String",
        "raw_table_values": "Array['String']"
    }
    """

    def __init__(self, document: str):
        super().__init__(document)
        self._cached_result: _T_DICT_ITEM = {}

    def _pre_validate(self, doc: BeautifulSoup) -> None:
        var_0 = doc
        var_1 = var_0.select_one("title")
        var_2 = var_1.text
        assert "Books to Scrape - Sandbox" in var_2
        return

    def _start_parse(self):
        self._cached_result.clear()
        self._cached_result["description"] = self._parse_description(
            self.__selector__
        )
        self._cached_result["title"] = self._parse_title(self.__selector__)
        self._cached_result["price"] = self._parse_price(self.__selector__)
        self._cached_result["upc"] = self._parse_upc(self.__selector__)
        self._cached_result["raw_table_values"] = self._parse_raw_table_values(
            self.__selector__
        )

    def view(self) -> _T_DICT_ITEM:
        return self._cached_result

    def _parse_description(self, doc: Tag):
        """product description"""

        var_0 = doc
        var_1 = var_0.select_one("#content_inner > article > p")
        var_2 = var_1.text
        return var_2

    def _parse_title(self, doc: Tag):
        var_0 = doc
        var_1 = var_0.select_one("h1")
        var_2 = var_1.text
        return var_2

    def _parse_price(self, doc: Tag):
        var_0 = doc
        try:
            var_2 = var_0.select_one(".product_main .price_color")
            var_3 = var_2.text
            return var_3
        except Exception as e:
            return "0"

    def _parse_upc(self, doc: Tag):
        """upc

        lorem upsum dolor
        """

        var_0 = doc
        var_1 = var_0.select_one("tr:nth-child(1) td")
        var_2 = var_1.text
        return var_2

    def _parse_raw_table_values(self, doc: Tag):
        """useless list of values"""

        var_0 = doc
        var_1 = var_0.select("tr > td")
        var_2 = [el.text for el in var_1]
        var_3 = [s.strip(" ") for s in var_2]
        return var_3


class BooksCatalogue(_BaseStructParser):
    """parse books from catalogue
        BooksCatalogue view() item signature:

    {
        "url": "String",
        "title": "String",
        "price": "String",
        "image": "String",
        "rating": "String"
    }
    """

    def __init__(self, document: str):
        super().__init__(document)
        self._cached_result: _T_LIST_ITEMS = []

    def _pre_validate(self, doc: BeautifulSoup) -> None:
        var_0 = doc
        var_1 = var_0.select_one("title")
        var_2 = var_1.text
        assert "Books to Scrape - Sandbox" in var_2
        return

    def _part_document(self) -> ResultSet:
        doc = self.__selector__
        var_0 = doc
        var_1 = var_0.select(".col-lg-3")
        return var_1

    def _start_parse(self):
        self._cached_result.clear()
        for part in self._part_document():
            self._cached_result.append(
                {
                    "url": self._parse_url(part),
                    "title": self._parse_title(part),
                    "price": self._parse_price(part),
                    "image": self._parse_image(part),
                    "rating": self._parse_rating(part),
                }
            )

    def view(self) -> _T_LIST_ITEMS:
        return self._cached_result

    def _parse_url(self, doc: Tag):
        """page url to product"""

        var_0 = doc
        var_1 = var_0.select_one("h3 > a")
        var_2 = (
            " ".join(var_1["href"])
            if isinstance(var_1["href"], list)
            else var_1["href"]
        )
        var_3 = "https://books.toscrape.com/catalogue/{}".format(var_2)
        return var_3

    def _parse_title(self, doc: Tag):
        var_0 = doc
        var_1 = var_0.select_one("h3 > a")
        var_2 = (
            " ".join(var_1["title"])
            if isinstance(var_1["title"], list)
            else var_1["title"]
        )
        return var_2

    def _parse_price(self, doc: Tag):
        var_0 = doc
        try:
            var_2 = var_0.select_one(".price_color")
            var_3 = var_2.text
            var_4 = var_3.lstrip("Â£")
            return var_4
        except Exception as e:
            return "0"

    def _parse_image(self, doc: Tag):
        var_0 = doc
        var_1 = var_0.select_one("img.thumbnail")
        var_2 = (
            " ".join(var_1["src"])
            if isinstance(var_1["src"], list)
            else var_1["src"]
        )
        var_3 = var_2.lstrip("..")
        var_4 = "https://books.toscrape.com{}".format(var_3)
        return var_4

    def _parse_rating(self, doc: Tag):
        var_0 = doc
        var_1 = var_0.select_one(".star-rating")
        var_2 = (
            " ".join(var_1["class"])
            if isinstance(var_1["class"], list)
            else var_1["class"]
        )
        var_3 = var_2.lstrip("star-rating ")
        return var_3
