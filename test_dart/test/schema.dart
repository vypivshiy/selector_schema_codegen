// Auto generated code by ssc_gen
// WARNING: Any manual changes made to this file will be lost when this
// is run again. Do not edit this file unless you know what you are doing.

import 'dart:core';
import 'package:universal_html/html.dart' show Document, LIElement;
import 'package:universal_html/parsing.dart' as html;

// dynamic: String, List<String> or null
typedef DictItem = Map<String, dynamic>;
typedef ListItems = List<DictItem>;

class _BaseStructParser {
  final String document;
  late final Document selector;
  final ListItems _cachedResult = [];

  _BaseStructParser(this.document) {
    selector = html.parseHtmlDocument(document);
  }

  _BaseStructParser parse() {
    _preValidate(selector);
    _startParse();
    return this;
  }

  view() {
    return _cachedResult;
  }

  /// pre validate document entrypoint
  _preValidate(Document doc) {}

  /// parse logic entrypoint
  _startParse() {}
}

/// sample docstring
///
/// test 123
///
/// - okay
///
///Book view() item signature:
///
///{
///    "description": "String",
///    "title": "String",
///    "price": "String",
///    "upc": "String",
///    "raw_table_values": "Array['String']"
///}
class Book extends _BaseStructParser {
  Book(super.document);

  @override
  DictItem view() {
    return _cachedResult[0];
  }

  @override
  _preValidate(Document doc) {
    var var_0 = doc;
    var var_1 = var_0.querySelector('title');
    var var_2 = var_1?.text;
    assert(var_2 != null && var_2.contains('Books to Scrape - Sandbox'));
    return;
  }

  @override
  _startParse() {
    _cachedResult.clear();
    _cachedResult.add({
      'description': _parseDescription(selector),
      'title': _parseTitle(selector),
      'price': _parsePrice(selector),
      'upc': _parseUpc(selector),
      'raw_table_values': _parseRawTableValues(selector),
    });
  }

  /// product description
  _parseDescription(Document doc) {
    var var_0 = doc;
    var var_1 = var_0.querySelector('#content_inner > article > p');
    var var_2 = var_1?.text;
    return var_2;
  }

  _parseTitle(Document doc) {
    var var_0 = doc;
    var var_1 = var_0.querySelector('h1');
    var var_2 = var_1?.text;
    return var_2;
  }

  _parsePrice(Document doc) {
    var var_0 = doc;
    try {
      var var_2 = var_0.querySelector('.product_main .price_color');
      var var_3 = var_2?.text;
      return var_3;
    } catch (e) {
      return '0';
    }
  }

  /// upc
  ///
  /// lorem upsum dolor
  _parseUpc(Document doc) {
    var var_0 = doc;
    var var_1 = var_0.querySelector('tr:nth-child(1) td');
    var var_2 = var_1?.text;
    return var_2;
  }

  /// useless list of values
  _parseRawTableValues(Document doc) {
    var var_0 = doc;
    var var_1 = var_0.querySelectorAll('tr > td');
    var var_2 = var_1.map((el) => el.text).toList();
    var var_3 = var_2
        .map((s) =>
            s?.replaceFirst(RegExp(r'^ '), "").replaceFirst(RegExp(r' $'), ""))
        .toList();
    return var_3;
  }
}

/// parse books from catalogue
///BooksCatalogue view() item signature:
///
///{
///    "url": "String",
///    "title": "String",
///    "price": "String",
///    "image": "String",
///    "rating": "String"
///}
class BooksCatalogue extends _BaseStructParser {
  BooksCatalogue(super.document);

  @override
  ListItems view() {
    return _cachedResult;
  }

  @override
  _preValidate(Document doc) {
    var var_0 = doc;
    var var_1 = var_0.querySelector('title');
    var var_2 = var_1?.text;
    assert(var_2 != null && var_2.contains('Books to Scrape - Sandbox'));
    return;
  }

  _partDocument(Document doc) {
    var var_0 = doc;
    var var_1 = var_0.querySelectorAll('.col-lg-3');
    return var_1;
  }

  @override
  _startParse() {
    _cachedResult.clear();
    for (var part in _partDocument(selector)) {
      _cachedResult.add({
        'url': _parseUrl(part),
        'title': _parseTitle(part),
        'price': _parsePrice(part),
        'image': _parseImage(part),
        'rating': _parseRating(part),
      });
    }
  }

  /// page url to product
  _parseUrl(LIElement doc) {
    var var_0 = doc;
    var var_1 = var_0.querySelector('h3 > a');
    var var_2 = var_1?.attributes['href'];
    var var_3 = 'https://books.toscrape.com/catalogue/$var_2';
    return var_3;
  }

  _parseTitle(LIElement doc) {
    var var_0 = doc;
    var var_1 = var_0.querySelector('h3 > a');
    var var_2 = var_1?.attributes['title'];
    return var_2;
  }

  _parsePrice(LIElement doc) {
    var var_0 = doc;
    try {
      var var_2 = var_0.querySelector('.price_color');
      var var_3 = var_2?.text;
      var var_4 = var_3?.replaceFirst(RegExp(r'^Â£'), "");
      return var_4;
    } catch (e) {
      return '0';
    }
  }

  _parseImage(LIElement doc) {
    var var_0 = doc;
    var var_1 = var_0.querySelector('img.thumbnail');
    var var_2 = var_1?.attributes['src'];
    var var_3 = var_2?.replaceFirst(RegExp(r'^\.\.'), "");
    var var_4 = 'https://books.toscrape.com$var_3';
    return var_4;
  }

  _parseRating(LIElement doc) {
    var var_0 = doc;
    var var_1 = var_0.querySelector('.star-rating');
    var var_2 = var_1?.attributes['class'];
    var var_3 = var_2?.replaceFirst(RegExp(r'^star\-rating '), "");
    return var_3;
  }
}
