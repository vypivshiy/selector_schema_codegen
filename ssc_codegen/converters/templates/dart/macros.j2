{% macro module_doc() %}
// Auto generated code by ssc_gen
// WARNING: Any manual changes made to this file will be lost when this
// is run again. Do not edit this file unless you know what you are doing.
{% endmacro %}

{% macro imports() %}
import 'dart:core';
import 'baseStruct.dart';
{% endmacro %}

{% macro class_header(struct) %}
{{- struct.docstring }}
class {{ struct.name }} extends BaseParser
{% endmacro %}

{% macro super_init(struct)%}
    {{ struct.name }}(rawDocument) : super(rawDocument);
    {{ struct.name }}.fromDocument(document): super.fromDocument(document);
    {{ struct.name }}.fromElement(element): super.fromElement(element);
{% endmacro %}

{# generate parse methods inner class #}
{% macro methods_code(struct) %}
{% for code in struct.methods_code() %}
    {{ code }}
    {% endfor %}
{% endmacro %}

{# generate parser method for ItemSchema#}
{% macro parse_item_schema(struct) %}
    @override
    mRunParse() {
        Map<String, dynamic> items = {};
    {% for name in struct.methods_names %}
        items["{{ name }}"] = xxParse{{ to_camelcase(name) }}(selector);
    {%- endfor %}
        return items;
    }

{% endmacro %}

{# generate parser method for DictSchema #}
{% macro parse_dict_schema(struct) %}
    @override
    mRunParse(){
        Map<String, dynamic> items = {};
        for (var el in mPartDocument(selector)){
            items[xxParseKey(el)] = xxParseValue(el);
        }
        return items;
    }
{% endmacro %}


{# generate parser method for FlattenListSchema #}
{% macro parse_flatten_list_schema(struct) %}
    @override
    mRunParse(){
        List<dynamic> items = [];
        for (var el in mPartDocument(selector)){
            items.add(xxParseItem(el));
        }
        return items;
    }
{% endmacro %}


{# generate parser method for ListSchema #}
{% macro parse_list_schema(struct) %}
    @override
    mRunParse() {
        List<Map<String, dynamic>> items = [];
        for (var el in mPartDocument(selector)){
            Map<String, dynamic> tmpItem = {};
            {%- for name in struct.methods_names %}
                tmpItem["{{ name }}"] = xxParse{{ to_camelcase(name) }}(el);
            {%- endfor %}
            items.add(tmpItem);
        }
        return items;
    }
{% endmacro %}

{# TODO: MAYBE add base methods interface? #}