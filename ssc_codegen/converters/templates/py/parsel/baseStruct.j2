{% from 'macros.j2' import default_python_methods %}
# Auto generated code by ssc_gen
# WARNING: Any manual changes made to this file will be lost when this
# is run again. Do not edit this file unless you know what you are doing.

import re
from typing import List, Type, Union

from parsel import Selector, SelectorList


class BaseParser:
    def __init__(self, html: Union[str, SelectorList, Selector]):
        self.__selector__ = Selector(html) if isinstance(html, str) else html

    def parse(self):
        self._pre_validate(self.__selector__)
        return self._run_parse()

    def _run_parse(self):
        # start parse entrypoint
        pass

    def _part_document(self, el: Selector):
        # split document to elements entrypoint
        pass

    def _pre_validate(self, el: Selector | SelectorList) -> None:
        # pre validate document entrypoint
        pass

    @staticmethod
    def _css(el: Selector, query) -> SelectorList:
        return el.css(query)

    @staticmethod
    def _css_all(el, q) -> SelectorList:
        return el.css(q)

    @staticmethod
    def _xpath(el, q) -> SelectorList:
        return el.xpath(q)

    @staticmethod
    def _xpath_all(el, q) -> SelectorList:
        return el.xpath(q)

    @staticmethod
    def _attr_text(el) -> str:
        return el.css("::text").get()

    @staticmethod
    def _attr_text_all(el) -> List[str]:
        return el.css("::text").getall()

    @staticmethod
    def _attr_raw(el) -> str:
        return el.get()

    @staticmethod
    def _attr_raw_all(el) -> List[str]:
        return el.getall()

    @staticmethod
    def _attr(el, name) -> str:
        return el.attrib.get(name)

    @staticmethod
    def _attr_all(el, name) -> list[str]:
        return el.attrib.get(name)

    @staticmethod
    def _assert_css(item: Selector, query, msg):
        assert item.css(query), msg
        return item

    @staticmethod
    def _assert_xpath(item: Selector, query, msg):
        assert item.xpath(query), msg
        return item

    {{ default_python_methods() }}