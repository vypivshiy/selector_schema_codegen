{% from 'macros.j2' import default_python_methods, imports, module_doc %}
{{ module_doc() }}
{{ imports() }}

from bs4 import BeautifulSoup, Tag, ResultSet

_T_ELEMENT = Union[Tag, BeautifulSoup, ResultSet]


class BaseParser:
    def __init__(self, html: Union[str, _T_ELEMENT], parser: str = "lxml"):
        self.__selector__ = BeautifulSoup(html, parser) if isinstance(html, str) else html

    def parse(self):
        self._pre_validate(self.__selector__)
        return self._run_parse()

    def _run_parse(self):
        # start parse entrypoint
        pass

    def _part_document(self, el: _T_ELEMENT) -> ResultSet:
        # split document to elements entrypoint
        pass

    def _pre_validate(self, el: _T_ELEMENT) -> None:
        # pre validate document entrypoint
        pass

    @staticmethod
    def _css(el: _T_ELEMENT, query):
        return el.select_one(query)

    @staticmethod
    def _css_all(el, query):
        return el.select(query)

    @staticmethod
    def _xpath(el, q):
        raise NotImplementedError

    @staticmethod
    def _xpath_all(el, q):
        raise NotImplementedError

    @staticmethod
    def _attr_text(el: Tag) -> str:
        return el.text

    @staticmethod
    def _attr_text_all(els: ResultSet) -> List[str]:
        return [el.text for el in els]

    @staticmethod
    def _attr_raw(el: Tag) -> str:
        return el.__str__()

    @staticmethod
    def _attr_raw_all(el: ResultSet) -> List[str]:
        return [e.__str__() for e in el]

    @staticmethod
    def _attr(el, name) -> str:
        # bs4 __getattr__ method returns list of attr values.
        # need standard variable type, because most html parser returns a string
        # eg: <p class="spam egg"> bs4 extract attrs returns ["spam", "egg"]
        return el[name] if isinstance(el[name], str) else " ".join(el[name])

    @staticmethod
    def _attr_all(els, name) -> list[str]:
        return [el[name] if isinstance(el[name], str) else " ".join(el[name]) for el in els]

    @staticmethod
    def _assert_css(item: Tag, query, msg):
        assert item.css(query), msg
        return item

    @staticmethod
    def _assert_xpath(item: Tag, query, msg):
        raise NotImplementedError("bs4 not support xpath")

    {{ default_python_methods() }}