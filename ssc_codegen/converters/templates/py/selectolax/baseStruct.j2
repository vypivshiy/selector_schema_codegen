{% from 'macros.j2' import default_python_methods, imports, module_doc %}
{{ module_doc }}
{{ imports() }}

from selectolax.parser import HTMLParser, Node

_T_PARSER = Union[HTMLParser, Node]


class BaseParser:
    def __init__(self, html: Union[str, _T_PARSER]):
        self.__selector__ = HTMLParser(html) if isinstance(html, str) else html

    def parse(self):
        self._pre_validate(self.__selector__)
        return self._run_parse()

    def _run_parse(self):
        # start parse entrypoint
        pass

    def _part_document(self, el: _T_PARSER) -> list[Node]:
        # split document to elements entrypoint
        pass

    def _pre_validate(self, el: _T_PARSER) -> None:
        # pre validate document entrypoint
        pass

    @staticmethod
    def _css(el: _T_PARSER, query):
        return el.css_first(query)

    @staticmethod
    def _css_all(el: _T_PARSER, query):
        return el.css(query)

    @staticmethod
    def _xpath(el, q):
        raise NotImplementedError

    @staticmethod
    def _xpath_all(el, q):
        raise NotImplementedError

    @staticmethod
    def _attr_text(el: _T_PARSER) -> str:
        return el.text()

    @staticmethod
    def _attr_text_all(els: List[Node]) -> List[str]:
        return [e.text() for e in els]

    @staticmethod
    def _attr_raw(el: Node) -> str:
        # (should be return a str)
        return el.html  # type: ignore

    @staticmethod
    def _attr_raw_all(el: List[Node]) -> List[str]:
        # (should be retruns a list[str])
        return [e.html for e in el]  # type: ignore

    @staticmethod
    def _attr(el: Node, name) -> str:
        return el.attributes[name]  # type: ignore

    @staticmethod
    def _attr_all(els: List[Node], name) -> list[str]:
        return [el.attributes[name] for el in els]  # type: ignore

    @staticmethod
    def _assert_css(item: Node, query, msg):
        assert item.css(query), msg
        return item

    @staticmethod
    def _assert_xpath(item: Node, query, msg):
        raise NotImplementedError("selectolax not support xpath")

    {{ default_python_methods() }}