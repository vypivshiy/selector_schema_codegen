{% macro module_doc() %}
# Auto generated code by ssc_gen
# WARNING: Any manual changes made to this file will be lost when this
# is run again. Do not edit this file unless you know what you are doing.
{% endmacro %}

{% macro imports() %}
import re
from typing import Optional, Dict, List, TypedDict, Union, Type

{% endmacro %}


{% macro class_header(struct) %}
class {{ struct.name }}(BaseParser):
{{- struct.docstring }}
{% endmacro %}

{# generate parse methods inner class #}
{% macro methods_code(struct) %}
{% for code in struct.methods_code() %}
    {{ code }}
    {% endfor %}
{% endmacro %}

{# generate parser method for ItemSchema#}
{% macro parse_item_schema(struct) %}
    def parse(self) -> {{ type_ret(struct) }}:
        return self._run_parse()

    def _run_parse(self) -> {{ type_ret(struct) }}:
        return {{ type_name(struct) }}(
    **{
{% for name in struct.methods_names %}
            "{{ name }}" : self._parse_{{ name }}(self.__selector__),
{%- endfor %}
            }
    )
{% endmacro %}

{# generate parser method for DictSchema #}
{% macro parse_dict_schema(struct) %}
    def parse(self) -> {{ type_ret(struct) }}:
        return self._run_parse()

    def _run_parse(self) -> {{ type_ret(struct) }}:
        return {self._parse_key(el): self._parse_value(el) for el in self._part_document(self.__selector__) }
{% endmacro %}


{# generate parser method for FlattenListSchema #}
{% macro parse_flatten_list_schema(struct) %}
    def parse(self) -> {{ type_ret(struct) }}:
        return self._run_parse()

    def _run_parse(self) -> {{ type_ret(struct) }}:
        return [self._parse_item(el) for el in self._part_document(self.__selector__)]
{% endmacro %}


{# generate parser method for ListSchema #}
{% macro parse_list_schema(struct) %}
    def parse(self) -> {{ type_ret(struct) }}:
        return self._run_parse()

    def _run_parse(self) -> {{ type_ret(struct) }}:
        return [
    {{ type_name(struct) }}(**{
        {% for name in struct.methods_names %}
            "{{ name }}": self._parse_{{ name }}(el),
        {% endfor %}
        }
    )
    for el in self._part_document(self.__selector__)]
{% endmacro %}

{% macro type_name(struct) %}
    {{- struct.types.name -}}
{% endmacro %}

{% macro type_ret(struct) %}
    {{- struct.types.ret_type -}}
{% endmacro %}


{% macro default_python_methods() %}

    @staticmethod
    def _str_trim(s, sep) -> str:
        return s.strip(sep)

    @staticmethod
    def _str_ltrim(s, sep) -> str:
        return s.lstrip(sep)

    @staticmethod
    def _str_rtrim(s, sep) -> str:
        return s.rstrip(sep)

    @staticmethod
    def _str_replace(s, old, new) -> str:
        return s.replace(old, new)

    @staticmethod
    def _str_split(s, sep) -> list[str]:
        return s.split(sep)

    @staticmethod
    def _str_format(s, template) -> str:
        return template.format(s)

    @staticmethod
    def _re_match(s, pattern, group: int = 1) -> str:
        return re.search(pattern, s)[group]  # type: ignore

    @staticmethod
    def _re_match_all(s, pattern) -> list[str]:
        return re.findall(pattern, s)

    @staticmethod
    def _re_sub(s, pattern, repl) -> str:
        return re.sub(pattern, repl, s)

    # ARRAY
    @staticmethod
    def _arr_index(lst, i):
        return lst[i]

    @staticmethod
    def _arr_join(lst, sep) -> str:
        return sep.join(lst)

    @staticmethod
    def _nested_parser(el, parser_schema: Type["BaseParser"]):
        return parser_schema(el).parse()

    @staticmethod
    def _assert_equal(item, other, msg):
        assert item == other, msg
        return item

    @staticmethod
    def _assert_contains(item, other, msg):
        assert other in item, msg
        return item

    @staticmethod
    def _assert_re_match(item, pattern, msg):
        assert re.search(pattern, item), msg
        return item
{% endmacro %}