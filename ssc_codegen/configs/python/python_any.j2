"""{{ generate_meta_info(ctx) }}"""

from typing import Any
{{ translator.REGEX_IMPORT }}

{{ translator.SELECTOR_IMPORT }}

class __BaseViewModel:
    def __init__(self, document: str):
        self.__raw__ = document
        self.__selector__ = {{ translator.SELECTOR_TYPE }}(document)
        self._cached_result: list[dict[str, Any]] = []
        self._aliases = {}
        self._view_keys = []

    @staticmethod
    def _pre_validate(doc):
        pass

    def _start_parse(self):
        pass

    def _part_document(self, part: {{ translator.SELECTOR_TYPE }}):
        pass

    def parse(self):
        self._pre_validate(self.__selector__)
        self._start_parse()
        return self

    def view(self) -> list[dict[str, list[str] | str]]:
        def map_fields(result):
            view_dict = {}
            for k in self._view_keys:
                if v := result.get(k):
                    k = self._aliases.get(k, k)
                    view_dict[k] = v
            return view_dict

        if len(self._cached_result) == 1:
            return [map_fields(self._cached_result[0])]
        return [map_fields(result) for result in self._cached_result]


{% for schema in ctx.schemas %}
class {{ schema.name }}(__BaseViewModel):
    """
    {{ schema.doc }}
    {{ generate_attr_signature(schema.attr_signature) }}
    """
    def __init__(self, document: str):
        super().__init__(document)
        self._aliases = {{ schema.aliases }}
        self._view_keys = {{ schema.view_keys }}

    @staticmethod
    def _pre_validate({{ translator.METHOD_ARG_NAME }}: {{ translator.SELECTOR_TYPE }}):
        {{ sep_code("\n        ", schema.pre_validate_code.split("\n")) }}
    def _part_document(self, {{ translator.METHOD_ARG_NAME }}: {{ translator.SELECTOR_TYPE }}):
        {{ sep_code("\n        ", schema.split_code.split("\n")) }}
    {% for attr in schema.attrs %}
    @staticmethod
    def _parse_{{ attr.name }}({{ translator.METHOD_ARG_NAME }}: {{ translator.SELECTOR_TYPE }}){{ ret_type(attr, translator)}}:
        {{ sep_code("\n        ", attr.code.split("\n")) }}
    {% endfor %}
    def _start_parse(self):
        # clear cache
        self._cached_result.clear()
        for part in self._part_document(self.__selector__):
            self._cached_result.append({
            {%- for key in schema.attrs_names %}
                {{ repr_str(key) }}: self._parse_{{ key }}({{ translator.METHOD_ARG_NAME }}),
            {%- endfor -%}
            })
{% endfor %}