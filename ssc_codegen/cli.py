import sys

from ssc_codegen.cli_utils import import_converter, cb_folder_out, cb_check_ssc_files, PyLIBS, JsLIBS, DartLIBS, GoLIBS, \
    ConverterLike
from ssc_codegen.ast_builder import build_ast_module
from ssc_codegen.converters.tools import py_naive_fix_indentation, go_naive_fix_docstring

if sys.version_info <= (3, 10):
    from enum import StrEnum
else:
    from enum import Enum


    class StrEnum(str, Enum):
        pass
from pathlib import Path
from typing import Annotated, List, Callable

from typer import Typer, Argument, Option, BadParameter

app = Typer(no_args_is_help=True)

COMMENT_STRING = "autogenerated by ssc-gen DO NOT_EDIT"


def generate_code(converter: ConverterLike,
                  out: Path[str],
                  prefix: str,
                  ssc_files: List[Path[str]],
                  suffix: str,
                  comment_str: str,
                  code_cb: Callable[[list[str]], str] = lambda c: '\n'.join(c)) -> None:
    for file_cfg in ssc_files:
        out_file = f'{prefix}{file_cfg.name}{suffix}'
        ast_module = build_ast_module(file_cfg)
        code = converter.convert_program(ast_module,
                                         comment=comment_str)
        code = code_cb(code)
        out_path = out / out_file
        with open(out_path, 'w') as f:
            f.write(code)


@app.command('py', help="generate python modules")
def gen_py(
        ssc_files: Annotated[List[Path], Argument(help="ssc-gen config files", callback=cb_check_ssc_files)],
        out: Annotated[Path[str], Option(help="output folder", callback=cb_folder_out)],
        lib: Annotated[PyLIBS, Option(help='core parser library')],
        prefix: Annotated[str, Option(help='out files prefix')] = "",
        suffix: Annotated[str, Option(help='out files suffix')] = ".py",

):
    converter = import_converter(f'py_{lib.value}.py')
    generate_code(converter, out, prefix, ssc_files, suffix, f'# {COMMENT_STRING}',
                  py_naive_fix_indentation)





@app.command('js', help="generate javascript modules")
def gen_js(
        ssc_files: Annotated[List[Path], Argument(help="ssc-gen config files", callback=cb_check_ssc_files)],
        out: Annotated[Path[str], Option(help="output folder", callback=cb_folder_out)],
        lib: Annotated[JsLIBS, Option(help='core parser library')] = JsLIBS.PURE,
        prefix: Annotated[str, Option(help='out files prefix')] = "",
        suffix: Annotated[str, Option(help='out files suffix')] = ".js",
):
    converter = import_converter(f'js_{lib.value}.py')
    generate_code(converter, out, prefix, ssc_files, suffix, f'// {COMMENT_STRING}')


@app.command('dart', help="generate dart modules")
def gen_dart(
        ssc_files: Annotated[List[Path], Argument(help="ssc-gen config files", callback=cb_check_ssc_files)],
        out: Annotated[Path[str], Option(help="output folder", callback=cb_folder_out)],
        lib: Annotated[DartLIBS, Option(help='core parser library')] = DartLIBS.UNIVERSAL_HTML,
        prefix: Annotated[str, Option(help='out files prefix')] = "",
        suffix: Annotated[str, Option(help='out files suffix')] = ".dart",
):
    converter = import_converter(f'dart_{lib.value}.py')
    generate_code(converter, out, prefix, ssc_files, suffix, f'// {COMMENT_STRING}')


@app.command('go', help="generate golang modules")
def gen_go(
        ssc_files: Annotated[List[Path], Argument(help="ssc-gen config files", callback=cb_check_ssc_files)],
        out: Annotated[Path[str], Option(help="output folder", callback=cb_folder_out)],
        lib: Annotated[GoLIBS, Option(help='core parser library')] = GoLIBS.GOQUERY,
        prefix: Annotated[str, Option(help='out files prefix')] = "",
        suffix: Annotated[str, Option(help='out files suffix')] = ".go",
):
    converter = import_converter(f'go_{lib.value}.py')
    generate_code(converter, out, prefix, ssc_files, suffix, f'// {COMMENT_STRING}',
                  go_naive_fix_docstring)


def main():
    app()


if __name__ == '__main__':
    main()
