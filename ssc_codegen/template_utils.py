"""helper function for templates"""
import re
from typing import TYPE_CHECKING, Type, Optional

from ssc_codegen.objects import VariableState

if TYPE_CHECKING:
    from ssc_codegen.configs.codegen_tools import ABCExpressionTranslator
    from ssc_codegen.yaml_parser import Info, SchemaAttribute


def ret_type(
    attr: "SchemaAttribute", translator: Type["ABCExpressionTranslator"]
) -> str:
    node = attr.ast[0]
    return translator().op_ret_type(node)


def camelcase(s: str) -> str:
    return "".join(word[0].upper() + word[1:] for word in s.split("_"))


def snake_case(s: str) -> str:
    return re.sub(r"(?<!^)(?=[A-Z])", "_", s).lower()


def generate_meta_info(info: "Info", *,
                       wrap: Optional[str] = None,
                       line_prefix: Optional[str] = None) -> str:
    text = f"""Auto generated code by selector_schema_codegen

id: {info.id}
name: {info.name}
author: {info.author}
description:
    {info.description}
source: {info.source}
tags:
    {info.tags}

WARNING: Any manual changes made to this file will be lost when this
is run again. Do not edit this file unless you know what you are doing.
"""
    if line_prefix:
        text = "".join([f"{line_prefix}{line}\n" for line in text.split('\n')])
    if wrap:
        text = f"{wrap}{text}{wrap}"
    return text

def generate_attr_signature(
    attrs_signature: dict[str, tuple[VariableState, str, str]],
    head: str = "view() elements signature:",
    sep: str = "\n\n        ",
) -> str:
    d = f"{head}{sep}"
    for attr_name, (var_state, alias, attr_doc) in attrs_signature.items():
        if alias:
            d += f"{alias} ({attr_name}) <{var_state.name}> - {attr_doc.strip()}{sep}"
        else:
            d += f"{attr_name} <{var_state.name}> - {attr_doc.strip()}{sep}"

    return d
