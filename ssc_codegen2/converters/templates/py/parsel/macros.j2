{% macro imports() %}
# Auto generated code by ssc_gen
# WARNING: Any manual changes made to this file will be lost when this
# is run again. Do not edit this file unless you know what you are doing.

from typing import Optional, Dict, List
from parsel import Selector, SelectorList

from .baseStruct import BaseParser
{% endmacro %}

{% macro class_header(struct) %}
class {{ struct.name }}(BaseParser):
{{- struct.docstring }}
{% endmacro %}

{# generate parse methods inner class #}
{% macro methods_code(struct) %}
{% for code in struct.methods_code() %}
    {{ code }}
    {% endfor %}
{% endmacro %}

{# generate parser method for ItemSchema#}
{% macro parse_item_schema(struct) %}
    def _run_parse(self):
        return {
{% for name in struct.methods_names %}
            "{{ name }}" : self._parse_{{ name }}(self.__selector__),
{%- endfor %}
            }
{% endmacro %}

{# generate parser method for DictSchema #}
{% macro parse_dict_schema(struct) %}
    def _run_parse(self):
        return {self._parse_key(el): self._parse_value(el) for el in self._part_document(self.__selector__) }
{% endmacro %}


{# generate parser method for FlattenListSchema #}
{% macro parse_flatten_list_schema(struct) %}
    def _run_parse(self):
        return [self._parse_item(el) for el in self._part_document(self.__selector__)]
{% endmacro %}


{# generate parser method for FlattenListSchema #}
{% macro parse_list_schema(struct) %}
    def _run_parse(self):
        return [{
        {% for name in struct.methods_names %}
            "{{ name }}" : self._parse_{{ name }}(self.part),
        {% endfor %}
        } for part in self._part_document(self.__selector__)]
{% endmacro %}