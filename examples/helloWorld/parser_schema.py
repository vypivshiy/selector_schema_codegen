# autogenerated by ssc-gen DO NOT_EDIT

from __future__ import annotations
import sys
from typing import List, TypedDict, Union

if sys.version_info < (3, 10):
    NoneType = type(None)
else:
    pass

from parsel import Selector
from parsel.selector import _SelectorType  # noqa

T_HelloWorld = TypedDict(
    "T_HelloWorld",
    {
        "title": str,
        "a_hrefs": List[str],
    },
)


class HelloWorld:
    """

    {
        "title": "String",
        "a_hrefs": "Array<String>"
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._document = (
            Selector(document) if isinstance(document, str) else document
        )

    def _parse_title(self, v: Union[Selector, _SelectorType]) -> str:
        v0 = v.css("title")
        return "".join(v0.css("::text").getall())

    def _parse_a_hrefs(self, v: Union[Selector, _SelectorType]) -> List[str]:
        v0 = v.css("a")
        return [e.attrib["href"] for e in v0]

    def parse(self) -> T_HelloWorld:
        return {
            "title": self._parse_title(self._document),
            "a_hrefs": self._parse_a_hrefs(self._document),
        }
