"""Demonstration implementation imdb search page parser

Include:

- examples manual write selectors
- extract json from next.js state and parse


Test (24.06.25):

IN:

ssc-gen parse-from-url "https://www.imdb.com/find/?q=matrix&s=tt&exact=true" -t imdb_com.py:SearchPage

OUT:

{
  "json_parse": {
    "results": [
      {
        "id": "tt0133093",
        "titleNameText": "\u041c\u0430\u0442\u0440\u0438\u0446\u0430",
        "titleReleaseText": "1999",
        "titleTypeText": "",
        "titlePosterImageModel": {
          "url": "https://m.media-amazon.com/images/M/MV5BN2NmN2VhMTQtMDNiOS00NDlhLTliMjgtODE2ZTY0ODQyNDRhXkEyXkFqcGc@._V1_.jpg",
          "maxHeight": 3156,
          "maxWidth": 2100,
          "caption": "Keanu Reeves, Laurence Fishburne, Joe Pantoliano, and Carrie-Anne Moss in \u041c\u0430\u0442\u0440\u0438\u0446\u0430 (1999)"
        },
        "topCredits": [
          "Keanu Reeves",
          "Laurence Fishburne"
        ],
        "imageType": "movie"
      },
      {
        "id": "tt0106062",
        "titleNameText": "Matrix",
        "titleReleaseText": "1993",
        "titleTypeText": "TV Series",
        "titlePosterImageModel": {
          "url": "https://m.media-amazon.com/images/M/MV5BM2JiZjU1NmQtNjg1Ni00NjA3LTk2MjMtNjYxMTgxODY0NjRhXkEyXkFqcGc@._V1_.jpg",
          "maxHeight": 708,
          "maxWidth": 500,
          "caption": "Matrix (1993)"
        },
        "topCredits": [
          "Nick Mancuso",
          "Phillip Jarrett"
        ],
        "imageType": "tvSeries"
      },
        ...
    ],
    "hasExactMatches": true
  },
  "selector_parse": [
    {
      "image": "https://m.media-amazon.com/images/M/MV5BN2NmN2VhMTQtMDNiOS00NDlhLTliMjgtODE2ZTY0ODQyNDRhXkEyXkFqcGc@._V1_QL75_UX50_CR0,1,50,74_.jpg",
      "image_alt": "Keanu Reeves, Laurence Fishburne, Joe Pantoliano, and Carrie-Anne Moss in \u041c\u0430\u0442\u0440\u0438\u0446\u0430 (1999)",
      "title": "\u041c\u0430\u0442\u0440\u0438\u0446\u0430",
      "url": "https://www.imdb.com/title/tt0133093/?ref_=fn_ttl_ttl_1",
      "year": 1999
    },
    {
      "image": "https://m.media-amazon.com/images/M/MV5BM2JiZjU1NmQtNjg1Ni00NjA3LTk2MjMtNjYxMTgxODY0NjRhXkEyXkFqcGc@._V1_QL75_UY74_CR1,0,50,74_.jpg",
      "image_alt": "Matrix (1993)",
      "title": "Matrix",
      "url": "https://www.imdb.com/title/tt0106062/?ref_=fn_ttl_ttl_2",
      "year": 1993
    },
   ...
  ]
}
"""
from ssc_codegen import ItemSchema, ListSchema, D, N


FMT_URL = "https://www.imdb.com{{}}"


class FindPageResults(ListSchema):
    __SPLIT_DOC__ = D().css_all(
        "ul.ipc-metadata-list > li.ipc-metadata-list-summary-item"
    )

    image = D(None).css("img.ipc-image[src]::attr(src)")
    image_alt = D(None).css("img.ipc-image[alt]::attr(alt)")
    title = D().css("a.ipc-metadata-list-summary-item__t::text")
    url = (
        D()
        .css("a.ipc-metadata-list-summary-item__t[href]::attr(href)")
        .fmt(FMT_URL)
    )
    # naive apologize first element contains year
    # maybe has collisions, false-positive selects
    year = (
        D(None)
        .css(
            "ul.ipc-metadata-list-summary-item__tl > li:first-child > span::text"
        )
        .re_sub("\D")
        .to_int()
    )


# fast make template:
# 1. copy content inner `script[id="__NEXT_DATA__"]`
# 2. save to file `imdb.json`
# 3. `props.pageProps.titleResults` path include useful information
# 4. run:
# ssc-gen json-gen imdb.json -o imdb_json.py -jp "props.pageProps.titleResults"
from ssc_codegen import Json  # noqa

# json-struct: Autogenerated by ssc-gen
class TitlePosterImageModel(Json):
    url: str
    maxHeight: int
    maxWidth: int
    caption: str

class Results(Json):
    id: str
    titleNameText: str
    titleReleaseText: str
    titleTypeText: str
    titlePosterImageModel: TitlePosterImageModel
    topCredits: list[str]
    imageType: str
    # autogen can be not capture extra/optional fields
    # extend it manually
    seriesId: str | None
    seriesNameText: str | None
    seriesReleaseText: str | None
    seriesTypeText: str | None
    seriesSeasonText: str | None
    seriesEpisodeText: str | None


class Content(Json):
    results: list[Results]
    hasExactMatches: bool

class SearchPage(ItemSchema):
    """Extract cards result from imdb.com

    Page entrypoint signature:
        required extra params `s=tt&exact=true`

        GET https://www.imdb.com/find/?q=<QUERY>&s=tt&exact=true

    EXAMPLES:
        GET https://www.imdb.com/find/?q=mr.robot&s=tt&exact=true
        GET https://www.imdb.com/find/?q=matrix&s=tt&exact=true
    
    """
    # TIP:
    # before write selectors, overview target page
    # this site use Next.js for send basic state in json format
    # we can parse this tag and parse json output
    json_parse = D().css('script[id="__NEXT_DATA__"]::text').jsonify(Content, "props.pageProps.titleResults")

    # for alt example, how looks implemented parser on css selectors
    selector_parse = N().sub_parser(FindPageResults)

