# autogenerated by ssc-gen DO NOT_EDIT
"""demo example for demonstrate work with json"""

from __future__ import annotations
import re
import json
from typing import List, TypedDict, Union
import sys

if sys.version_info >= (3, 10):
    from types import NoneType
else:
    NoneType = type(None)

from parsel import Selector, SelectorList

J_Author = TypedDict(
    "J_Author",
    {
        "name": str,
        "goodreads_links": str,
        "slug": str,
    },
)
J_Quote = TypedDict(
    "J_Quote",
    {
        "tags": List[str],
        "author": J_Author,
        "text": str,
    },
)
T_Main = TypedDict(
    "T_Main",
    {
        "data": List[J_Quote],
    },
)


class Main:
    """http://quotes.toscrape.com/js/ parser

    USAGE:
        GET http://quotes.toscrape.com/js/, http://quotes.toscrape.com/js/page/2/


    {
        "data": [
            {
                "tags": "String",
                "author": {
                    "name": "String",
                    "goodreads_links": "String",
                    "slug": "String"
                },
                "text": "String"
            },
            "..."
        ]
    }"""

    def __init__(self, document: Union[str, SelectorList, Selector]) -> None:
        self._doc = (
            Selector(document) if isinstance(document, str) else document
        )

    def _parse_data(self, value: Selector) -> List[J_Quote]:
        value1 = value.get()
        value2 = re.search("var\\s+\\w+\\s*=\\s*(\\[[\\s\\S]*?\\]);", value1)[1]
        value3 = json.loads(value2)
        return value3

    def parse(self) -> T_Main:
        return {"data": self._parse_data(self._doc)}
