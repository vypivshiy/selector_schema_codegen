# autogenerated by ssc-gen DO NOT_EDIT
from __future__ import annotations
import re
from typing import List, TypedDict, Union
import sys

if sys.version_info >= (3, 10):
    from types import NoneType
else:
    NoneType = type(None)

from parsel import Selector
from parsel.selector import _SelectorType  # noqa

T_Main = TypedDict(
    "T_Main",
    {
        "title_orig": str,
        "title_fmt": str,
        "title_trim": str,
        "title_trim2": str,
        "title_rtrim": str,
        "title_ltrim": str,
        "title_repl": str,
        "title_split": List[str],
        "title_split_fmt": List[str],
        "title_re": str,
        "title_re_sub": str,
        "items_orig": List[str],
        "items_str_operations": List[str],
        "items_str_join": str,
        "items_str_digits": List[str],
    },
)


class Main:
    """string operations example

    USAGE:
        - pass index.html document from 2_string_operations folder


    {
        "title_orig": "String",
        "title_fmt": "String",
        "title_trim": "String",
        "title_trim2": "String",
        "title_rtrim": "String",
        "title_ltrim": "String",
        "title_repl": "String",
        "title_split": "Array<String>",
        "title_split_fmt": "Array<String>",
        "title_re": "String",
        "title_re_sub": "String",
        "items_orig": "Array<String>",
        "items_str_operations": "Array<String>",
        "items_str_join": "String",
        "items_str_digits": "Array<String>"
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = (
            Selector(document) if isinstance(document, str) else document
        )

    def _parse_title_orig(self, value: Selector) -> str:
        value1 = value.css("title")
        return "".join(value1.css("::text").getall())

    def _parse_title_fmt(self, value: Selector) -> str:
        value1 = value.css("title")
        value2 = "".join(value1.css("::text").getall())
        return f"TITLE - {value2} - END." if value2 else value2

    def _parse_title_trim(self, value: Selector) -> str:
        value1 = value.css("title")
        value2 = "".join(value1.css("::text").getall())
        return value2.strip(" ")

    def _parse_title_trim2(self, value: Selector) -> str:
        value1 = value.css("title")
        value2 = "".join(value1.css("::text").getall())
        value3 = value2.strip(" ")
        return value3.strip("vvv")

    def _parse_title_rtrim(self, value: Selector) -> str:
        value1 = value.css("title")
        value2 = "".join(value1.css("::text").getall())
        return value2.rstrip("vvv   ")

    def _parse_title_ltrim(self, value: Selector) -> str:
        value1 = value.css("title")
        value2 = "".join(value1.css("::text").getall())
        return value2.lstrip("   vvv")

    def _parse_title_repl(self, value: Selector) -> str:
        value1 = value.css("title")
        value2 = "".join(value1.css("::text").getall())
        value3 = value2.replace("vvv   ", "===")
        return value3.replace("   vvv", "===")

    def _parse_title_split(self, value: Selector) -> List[str]:
        value1 = value.css("title")
        value2 = "".join(value1.css("::text").getall())
        return value2.split(" ")

    def _parse_title_split_fmt(self, value: Selector) -> List[str]:
        value1 = value.css("title")
        value2 = "".join(value1.css("::text").getall())
        value3 = value2.split(" ")
        return [f"({e})" for e in value3 if e]

    def _parse_title_re(self, value: Selector) -> str:
        value1 = value.css("title")
        value2 = "".join(value1.css("::text").getall())
        return re.search("vvv(.*?)vvv", value2)[1]

    def _parse_title_re_sub(self, value: Selector) -> str:
        value1 = value.css("title")
        value2 = "".join(value1.css("::text").getall())
        return re.sub("vvv(.*?)vvv", "My Title", value2)

    def _parse_items_orig(self, value: Selector) -> List[str]:
        value1 = value.css(".items > li")
        return value1.css("::text").getall()

    def _parse_items_str_operations(self, value: Selector) -> List[str]:
        value1 = value.css(".items > li")
        value2 = value1.css("::text").getall()
        return [e.replace("__", "") for e in value2]

    def _parse_items_str_join(self, value: Selector) -> str:
        value1 = value.css(".items > li")
        value2 = value1.css("::text").getall()
        return ", ".join(value2)

    def _parse_items_str_digits(self, value: Selector) -> List[str]:
        value1 = value.css(".items > li")
        value2 = value1.css("::text").getall()
        return [re.sub("\D+", "", e) for e in value2]

    def parse(self) -> T_Main:
        return {
            "title_orig": self._parse_title_orig(self._doc),
            "title_fmt": self._parse_title_fmt(self._doc),
            "title_trim": self._parse_title_trim(self._doc),
            "title_trim2": self._parse_title_trim2(self._doc),
            "title_rtrim": self._parse_title_rtrim(self._doc),
            "title_ltrim": self._parse_title_ltrim(self._doc),
            "title_repl": self._parse_title_repl(self._doc),
            "title_split": self._parse_title_split(self._doc),
            "title_split_fmt": self._parse_title_split_fmt(self._doc),
            "title_re": self._parse_title_re(self._doc),
            "title_re_sub": self._parse_title_re_sub(self._doc),
            "items_orig": self._parse_items_orig(self._doc),
            "items_str_operations": self._parse_items_str_operations(self._doc),
            "items_str_join": self._parse_items_str_join(self._doc),
            "items_str_digits": self._parse_items_str_digits(self._doc),
        }
