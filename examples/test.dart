/**
Auto generated code by selector_schema_codegen

id: books.to_scrape
name: books.to_scrape
author: username
description:
    books.to_scrape schema
source: source_link
tags:
    shop, books

WARNING: Any manual changes made to this file will be lost when this
is run again. Do not edit this file unless you know what you are doing.

**/
import 'dart:core';
import 'package:html/parser.dart' as html;

// TODO change dynamic to generic with String OR List<String>
typedef ParsedValue = Map<String, dynamic>;


class UselessElements{
    /// useless elements extractor
    /// 
    /// view() elements signature:
    /// title <TEXT> - a title page
    /// meta <TEXT> - all meta elements tags
    /// hrefs <ARRAY> - all a [href] elements
    /// 
    final String document;
    final html.Document selector;
    final Map<String, String> _aliases = {};
    final List<String> _viewKeys = ['title', 'meta', 'hrefs'];
    final List<ParsedValue> _cachedResult = [];

    UselessElements(
        this.document,
        {this.selector = html.parse(document)}
    );

    void parse(){
        this._preValidate(selector);
        this._startParse();
    }

    void _preValidate(html.Document part){
        null;
    }

    // TODO typing better
    List<dynamic> _partDocument(dynamic part){
        this._preValidate(this.selector);
        return [part];
    }

    
    dynamic _parseTitle(dynamic part){
        var val_0 = part.querySelector("title");
        String val_1 = val_0.text;
        return val_1;
    }
    
    dynamic _parseMeta(dynamic part){
        var val_0 = part.querySelector("head > meta");
        String val_1 = val_0.innerHtml;
        return val_1;
    }
    
    dynamic _parseHrefs(dynamic part){
        var val_0 = part.querySelectorAll("a");
        List<String> val_1 = val_0.map((el) => el.attributes["href"]).toList();
        return val_1;
    }
    

    void _startParse(){
        // clear cache
        this._cachedResult.clear();
        for (var part in this._partDocument(this.selector)){
            this._cachedResult.add({
                'title': this._parseTitle(part),
                'meta': this._parseMeta(part),
                'hrefs': this._parseHrefs(part),});
        }
    }

    List<ParsedValue> view() {
      ParsedValue mapFields(ParsedValue result) {
      ParsedValue viewDict = {};
      for (String k in _viewKeys) {
      var v = result[k];
      if (v != null) {
          k = _aliases[k] ?? k;
          viewDict[k] = v;
        }
      }
      return viewDict;
      }

    if (_cachedResult.length == 1) {
        return [mapFields(_cachedResult[0])];
    }
    return _cachedResult.map(mapFields).toList();
    }
}

class Book{
    /// example book object parser
    /// 
    /// view() elements signature:
    /// url_page (url) <TEXT> - page url to book
    /// image <TEXT> - book image
    /// price <TEXT> - book price
    /// name <TEXT> - book name
    /// rating <TEXT> - book rating
    /// 
    final String document;
    final html.Document selector;
    final Map<String, String> _aliases = {'url': 'url_page'};
    final List<String> _viewKeys = ['url', 'image', 'price', 'name', 'rating'];
    final List<ParsedValue> _cachedResult = [];

    Book(
        this.document,
        {this.selector = html.parse(document)}
    );

    void parse(){
        this._preValidate(selector);
        this._startParse();
    }

    void _preValidate(html.Document part){
        var val_0 = part.querySelector("div > a");
        String val_1 = val_0.attributes["href"];
        RegExp re_2 = RegExp(r"cyka cyka.jpg");
        assert(re_2.firstMatch(val_1) != null);
        
    }

    // TODO typing better
    List<dynamic> _partDocument(dynamic part){
        this._preValidate(this.selector);
        var val_0 = part.querySelectorAll("ol.row > li");
        return val_0;
    }

    
    dynamic _parseUrl(dynamic part){
        var val_0 = part.querySelector("div.image_container > a");
        String val_1 = val_0.attributes["href"];
        String val_2 = "https://books.toscrape.com/catalogue/$val_1";
        return val_2;
    }
    
    dynamic _parseImage(dynamic part){
        var val_0 = part.querySelector("div.image_container > a > img");
        String val_1 = val_0.attributes["src"];
        return val_1;
    }
    
    dynamic _parsePrice(dynamic part){
        try {
  var val_1 = part.querySelector("div.product_price > p.price_color");
        String val_2 = val_1.text;
        return val_2; } catch (e) {
  return "0";
        }
    }
    
    dynamic _parseName(dynamic part){
        var val_0 = part.querySelector("h3 > a");
        String val_1 = val_0.attributes["title"];
        return val_1;
    }
    
    dynamic _parseAvailable(dynamic part){
        var val_0 = part.querySelector("div.product_price > p.availability > i");
        String val_1 = val_0.attributes["class"];
        return val_1;
    }
    
    dynamic _parseRating(dynamic part){
        var val_0 = part.querySelector("p.star-rating");
        String val_1 = val_0.attributes["class"];
        String val_2 = val_1.replaceFirst(RegExp(r'^star-rating '), "");
        return val_2;
    }
    

    void _startParse(){
        // clear cache
        this._cachedResult.clear();
        for (var part in this._partDocument(this.selector)){
            this._cachedResult.add({
                'url': this._parseUrl(part),
                'image': this._parseImage(part),
                'price': this._parsePrice(part),
                'name': this._parseName(part),
                'available': this._parseAvailable(part),
                'rating': this._parseRating(part),});
        }
    }

    List<ParsedValue> view() {
      ParsedValue mapFields(ParsedValue result) {
      ParsedValue viewDict = {};
      for (String k in _viewKeys) {
      var v = result[k];
      if (v != null) {
          k = _aliases[k] ?? k;
          viewDict[k] = v;
        }
      }
      return viewDict;
      }

    if (_cachedResult.length == 1) {
        return [mapFields(_cachedResult[0])];
    }
    return _cachedResult.map(mapFields).toList();
    }
}
