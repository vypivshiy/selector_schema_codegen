# autogenerated by ssc-gen DO NOT_EDIT
from __future__ import annotations
from typing import Dict, Union
import sys

if sys.version_info >= (3, 10):
    from types import NoneType
else:
    NoneType = type(None)

from parsel import Selector, SelectorList
from parsel.selector import _SelectorType  # noqa

T_ProductDescription = Dict[str, str]


class ProductDescription:
    """parse product description from product page

    Response input examples:
        - https://books.toscrape.com/catalogue/in-her-wake_980/index.html
        - from catalogue page


    {
        "UPC": "String",
        "Product Type": "Books",
        "Price (excl. tax)": "String",
        "Price (incl. tax)": "String",
        "Tax": "String",
        "Availability": "In stock (<count>)",
        "Number of reviews": "0 (always, its fiction shop lol)"
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = (
            Selector(document) if isinstance(document, str) else document
        )

    def _split_doc(self, value: _SelectorType) -> SelectorList:
        return value.css("table tr")

    def _parse_key(self, value: Selector) -> str:
        value1 = value.css("th")
        return "".join(value1.css("::text").getall())

    def _parse_value(self, value: Selector) -> str:
        value1 = value.css("td")
        return "".join(value1.css("::text").getall())

    def parse(self) -> T_ProductDescription:
        return {
            self._parse_key(e): self._parse_value(e)
            for e in self._split_doc(self._doc)
        }
