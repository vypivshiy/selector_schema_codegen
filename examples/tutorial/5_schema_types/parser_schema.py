# autogenerated by ssc-gen DO NOT_EDIT
from __future__ import annotations
from typing import List, Dict, TypedDict, Union

from parsel import Selector, SelectorList

T_ListGroup_ITEM = TypedDict("T_ListGroup_ITEM", {"p_tag": str, "a_href": str})
T_ListGroup = List[T_ListGroup_ITEM]
T_DictGroup = Dict[str, str]
T_FlatListGroup = List[str]
T_Main = TypedDict(
    "T_Main",
    {
        "list_group": T_ListGroup,
        "dict_group": T_DictGroup,
        "flat_list_group": T_FlatListGroup,
        "title": str,
    },
)


class ListGroup:
    """

    [
        {
            "p_tag": "String",
            "a_href": "String"
        },
        "..."
    ]"""

    def __init__(self, document: Union[str, SelectorList, Selector]) -> None:
        self._doc = (
            Selector(document) if isinstance(document, str) else document
        )

    def _split_doc(self, value: Selector) -> SelectorList:
        value1 = value.css(".list-group > .item")
        return value1

    def _parse_p_tag(self, value: Selector) -> str:
        value1 = value.css("p")
        value2 = "".join(value1.css("::text").getall())
        return value2

    def _parse_a_href(self, value: Selector) -> str:
        value1 = value.css("a")
        value2 = value1.attrib["href"]
        return value2

    def parse(self) -> T_ListGroup:
        return [
            {"p_tag": self._parse_p_tag(e), "a_href": self._parse_a_href(e)}
            for e in self._split_doc(self._doc)
        ]


class DictGroup:
    """

    {
        "key1": "value1",
        "keyN": "valueN",
        "...": "..."
    }"""

    def __init__(self, document: Union[str, SelectorList, Selector]) -> None:
        self._doc = (
            Selector(document) if isinstance(document, str) else document
        )

    def _split_doc(self, value: Selector) -> SelectorList:
        value1 = value.css(".dict-group > li")
        return value1

    def _parse_key(self, value: Selector) -> str:
        value1 = value.attrib["class"]
        return value1

    def _parse_value(self, value: Selector) -> str:
        value1 = "".join(value.css("::text").getall())
        return value1

    def parse(self) -> T_DictGroup:
        return {
            self._parse_key(e): self._parse_value(e)
            for e in self._split_doc(self._doc)
        }


class FlatListGroup:
    """

    [
        "item1",
        "itemN",
        "..."
    ]"""

    def __init__(self, document: Union[str, SelectorList, Selector]) -> None:
        self._doc = (
            Selector(document) if isinstance(document, str) else document
        )

    def _split_doc(self, value: Selector) -> SelectorList:
        value1 = value.css(".flatlist-group > li")
        return value1

    def _parse_item(self, value: Selector) -> str:
        value1 = "".join(value.css("::text").getall())
        return value1

    def parse(self) -> T_FlatListGroup:
        return [self._parse_item(e) for e in self._split_doc(self._doc)]


class Main:
    """

    {
        "list_group": [
            {
                "p_tag": "String",
                "a_href": "String"
            },
            "..."
        ],
        "dict_group": {
            "key1": "value1",
            "keyN": "valueN",
            "...": "..."
        },
        "flat_list_group": [
            "item1",
            "itemN",
            "..."
        ],
        "title": "String"
    }"""

    def __init__(self, document: Union[str, SelectorList, Selector]) -> None:
        self._doc = (
            Selector(document) if isinstance(document, str) else document
        )

    def _parse_list_group(self, value: Selector) -> T_ListGroup:
        value1 = ListGroup(value).parse()
        return value1

    def _parse_dict_group(self, value: Selector) -> T_DictGroup:
        value1 = DictGroup(value).parse()
        return value1

    def _parse_flat_list_group(self, value: Selector) -> T_FlatListGroup:
        value1 = FlatListGroup(value).parse()
        return value1

    def _parse_title(self, value: Selector) -> str:
        value1 = value.css("title")
        value2 = "".join(value1.css("::text").getall())
        return value2

    def parse(self) -> T_Main:
        return {
            "list_group": self._parse_list_group(self._doc),
            "dict_group": self._parse_dict_group(self._doc),
            "flat_list_group": self._parse_flat_list_group(self._doc),
            "title": self._parse_title(self._doc),
        }
