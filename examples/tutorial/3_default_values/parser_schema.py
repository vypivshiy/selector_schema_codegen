# autogenerated by ssc-gen DO NOT_EDIT
from __future__ import annotations
from typing import TypedDict, Union, Optional
from contextlib import suppress

from parsel import Selector, SelectorList

T_Main = TypedDict(
    "T_Main",
    {
        "title_ok": str,
        "title_null": Optional[str],
        "title_str_default": str,
        "title_int_default": int,
        "title_float_default": float,
    },
)


class Main:
    """

    {
        "title_ok": "String",
        "title_null": "String",
        "title_str_default": "String",
        "title_int_default": "Int",
        "title_float_default": "Float"
    }"""

    def __init__(self, document: Union[str, SelectorList, Selector]) -> None:
        self._doc = (
            Selector(document) if isinstance(document, str) else document
        )

    def _parse_title_ok(self, value: Selector) -> str:
        value1 = value.css("title")
        value2 = "".join(value1.css("::text").getall())
        return value2

    def _parse_title_null(self, value: Selector) -> Optional[str]:
        value1 = value
        with suppress(Exception):
            value2 = value1.css("title")
            assert value2.css("a"), ""
            value3 = value2
            value4 = "".join(value3.css("::text").getall())
            return value4
        return None

    def _parse_title_str_default(self, value: Selector) -> str:
        value1 = value
        with suppress(Exception):
            value2 = value1.css("title")
            assert value2.css("a"), ""
            value3 = value2
            value4 = "".join(value3.css("::text").getall())
            return value4
        return "unknown"

    def _parse_title_int_default(self, value: Selector) -> int:
        value1 = value
        with suppress(Exception):
            value2 = value1.css("title")
            value3 = "".join(value2.css("::text").getall())
            value4 = int(value3)
            return value4
        return 1

    def _parse_title_float_default(self, value: Selector) -> float:
        value1 = value
        with suppress(Exception):
            value2 = value1.css("title")
            value3 = "".join(value2.css("::text").getall())
            value4 = float(value3)
            return value4
        return 3.14

    def parse(self) -> T_Main:
        return {
            "title_ok": self._parse_title_ok(self._doc),
            "title_null": self._parse_title_null(self._doc),
            "title_str_default": self._parse_title_str_default(self._doc),
            "title_int_default": self._parse_title_int_default(self._doc),
            "title_float_default": self._parse_title_float_default(self._doc),
        }
