# autogenerated by ssc-gen DO NOT_EDIT
"""Example how to parse json-like data from plain HTML"""

import re
import json
from typing import List, TypedDict, Union


from bs4 import BeautifulSoup, ResultSet, Tag  # noqa (for typing)

J_Author = TypedDict(
    "J_Author",
    {
        "name": str,
        "goodreads_links": str,
        "slug": str,
    },
)
J_Quote = TypedDict(
    "J_Quote",
    {
        "tags": List[str],
        "author": J_Author,
        "text": str,
    },
)
T_Main = TypedDict(
    "T_Main",
    {
        "data": List[J_Quote],
    },
)


class Main:
    """

    {
        "data": [
            {
                "tags": "Array<String>",
                "author": {
                    "name": "String",
                    "goodreads_links": "String",
                    "slug": "String"
                },
                "text": "String"
            },
            "..."
        ]
    }"""

    def __init__(self, document: Union[bytes, str, BeautifulSoup, Tag]) -> None:
        self._document = (
            BeautifulSoup(document, "lxml")
            if isinstance(document, (str, bytes))
            else document
        )

    def _parse_data(self, v: Union[BeautifulSoup, Tag]) -> List[J_Quote]:
        v0 = str(v)
        v1 = re.search("var\\s+data\\s*=\\s*(\\[.*\\]);\\s+for", v0, re.S)[1]
        
        return json.loads(v1)

    def parse(self) -> T_Main:
        return {
            "data": self._parse_data(self._document),
        }
