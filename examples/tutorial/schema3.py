# autogenerated by ssc-gen DO NOT_EDIT
from __future__ import annotations
import re
from typing import List, TypedDict, Union, Optional
from contextlib import suppress
import sys

if sys.version_info >= (3, 10):
    from types import NoneType
else:
    NoneType = type(None)

from parsel import Selector, SelectorList
from parsel.selector import _SelectorType  # noqa

T_Book = TypedDict(
    "T_Book",
    {
        "name": str,
        "image_url": str,
        "url": str,
        "rating": str,
        "price": int,
    },
)
T_MainCatalogue = TypedDict(
    "T_MainCatalogue",
    {
        "books": List[T_Book],
        "prev_page": Optional[str],
        "next_page": Optional[str],
        "curr_page": str,
    },
)


class Book:
    """

    [
        {
            "name": "String",
            "image_url": "String",
            "url": "String",
            "rating": "String",
            "price": "Int"
        },
        "..."
    ]"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = (
            Selector(document) if isinstance(document, str) else document
        )

    def _split_doc(self, value: _SelectorType) -> SelectorList:
        return value.css(".col-lg-3")

    def _parse_name(self, value: Selector) -> str:
        value1 = value.css(".thumbnail")
        return value1.attrib["alt"]

    def _parse_image_url(self, value: Selector) -> str:
        value1 = value.css(".thumbnail")
        value2 = value1.attrib["src"]
        value3 = value2.lstrip("..")
        return f"https://books.toscrape.com{value3}" if value3 else value3

    def _parse_url(self, value: Selector) -> str:
        value1 = value.css(".image_container > a")
        value2 = value1.attrib["href"]
        return (
            f"https://books.toscrape.com/catalogue/{value2}"
            if value2
            else value2
        )

    def _parse_rating(self, value: Selector) -> str:
        value1 = value.css(".star-rating")
        value2 = value1.attrib["class"]
        return value2.lstrip("star-rating ")

    def _parse_price(self, value: Selector) -> int:
        value1 = value
        with suppress(Exception):
            value2 = value1.css(".price_color")
            value3 = "".join(value2.css("::text").getall())
            value4 = re.search("(\\d+)", value3)[1]
            return int(value4)
        return 0

    def parse(self) -> List[T_Book]:
        return [
            {
                "name": self._parse_name(e),
                "image_url": self._parse_image_url(e),
                "url": self._parse_url(e),
                "rating": self._parse_rating(e),
                "price": self._parse_price(e),
            }
            for e in self._split_doc(self._doc)
        ]


class MainCatalogue:
    """parse main catalogue page

    Response input examples:
        - https://books.toscrape.com/
        - https://books.toscrape.com/catalogue/page-2.html



    {
        "books": [
            {
                "name": "String",
                "image_url": "String",
                "url": "String",
                "rating": "String",
                "price": "Int"
            },
            "..."
        ],
        "prev_page": "String",
        "next_page": "String",
        "curr_page": "String"
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = (
            Selector(document) if isinstance(document, str) else document
        )

    def _parse_books(self, value: Selector) -> List[T_Book]:
        return Book(value).parse()

    def _parse_prev_page(self, value: Selector) -> Optional[str]:
        value1 = value
        with suppress(Exception):
            value2 = value1.css(".previous a")
            value3 = value2.attrib["href"]
            value4 = value3.lstrip("catalogue/")
            return (
                f"https://books.toscrape.com/catalogue/{value4}"
                if value4
                else value4
            )
        return None

    def _parse_next_page(self, value: Selector) -> Optional[str]:
        value1 = value
        with suppress(Exception):
            value2 = value1.css(".next a")
            value3 = value2.attrib["href"]
            value4 = value3.lstrip("catalogue/")
            return (
                f"https://books.toscrape.com/catalogue/{value4}"
                if value4
                else value4
            )
        return None

    def _parse_curr_page(self, value: Selector) -> str:
        value1 = value.css(".current")
        value2 = "".join(value1.css("::text").getall())
        value3 = re.search("Page\\s(\\d+)", value2)[1]
        return (
            f"https://books.toscrape.com/catalogue/page-{value3}.html"
            if value3
            else value3
        )

    def parse(self) -> T_MainCatalogue:
        return {
            "books": self._parse_books(self._doc),
            "prev_page": self._parse_prev_page(self._doc),
            "next_page": self._parse_next_page(self._doc),
            "curr_page": self._parse_curr_page(self._doc),
        }
