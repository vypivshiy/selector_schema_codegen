# autogenerated by ssc-gen DO NOT_EDIT
"""example usage case this structure"""

from typing import List, Union
from contextlib import suppress


from bs4 import BeautifulSoup, ResultSet, Tag  # noqa (for typing)

T_Urls = List[str]


class Urls:
    """

    [
        "String",
        "..."
    ]"""

    def __init__(self, document: Union[bytes, str, BeautifulSoup, Tag]) -> None:
        self._document = (
            BeautifulSoup(document, "lxml")
            if isinstance(document, (str, bytes))
            else document
        )

    def _parse_images(self, v: Union[BeautifulSoup, Tag]) -> List[str]:
        v0 = v
        with suppress(Exception):
            v1 = v0.select("img[src] ")
            return [
                e["src"] if isinstance(e["src"], str) else " ".join(e["src"])
                for e in v1
            ]
        return []

    def _parse_hrefs(self, v: Union[BeautifulSoup, Tag]) -> List[str]:
        v0 = v
        with suppress(Exception):
            v1 = v0.select("a[href] ")
            return [
                e["href"] if isinstance(e["href"], str) else " ".join(e["href"])
                for e in v1
            ]
        return []

    def _parse_embed(self, v: Union[BeautifulSoup, Tag]) -> List[str]:
        v0 = v
        with suppress(Exception):
            v1 = v0.select("embed[src] ")
            return [
                e["src"] if isinstance(e["src"], str) else " ".join(e["src"])
                for e in v1
            ]
        return []

    def _parse_scripts(self, v: Union[BeautifulSoup, Tag]) -> List[str]:
        v0 = v
        with suppress(Exception):
            v1 = v0.select("script[src] ")
            return [
                e["src"] if isinstance(e["src"], str) else " ".join(e["src"])
                for e in v1
            ]
        return []

    def parse(self) -> T_Urls:
        return list(
            dict.fromkeys(
                self._parse_images(self._document)
                + self._parse_hrefs(self._document)
                + self._parse_embed(self._document)
                + self._parse_scripts(self._document)
            )
        )
