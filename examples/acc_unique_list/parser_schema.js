// autogenerated by ssc-gen DO NOT_EDIT
/*** example usage case this structure*/
/*** 
* 
* [
*     "String",
*     "..."
* ]*/
class Urls{

constructor(doc){
if (typeof doc === 'string'){
this._doc = new DOMParser().parseFromString(doc, 'text/html');
} else if (doc instanceof Document || doc instanceof Element){
this._doc = doc;
} else {
throw new Error("Invalid input: Expected a Document, Element, or string");}
}

_parseImages(v){
let v0 = v;try {
let v1 = Array.from(v0.querySelectorAll('img[src] '));
return v1.map(e => e.getAttribute('src'));
}catch(Error) { return []; }
}
_parseHrefs(v){
let v0 = v;try {
let v1 = Array.from(v0.querySelectorAll('a[href] '));
return v1.map(e => e.getAttribute('href'));
}catch(Error) { return []; }
}
_parseEmbed(v){
let v0 = v;try {
let v1 = Array.from(v0.querySelectorAll('embed[src] '));
return v1.map(e => e.getAttribute('src'));
}catch(Error) { return []; }
}
_parseScripts(v){
let v0 = v;try {
let v1 = Array.from(v0.querySelectorAll('script[src] '));
return v1.map(e => e.getAttribute('src'));
}catch(Error) { return []; }
}
parse() {
return [...new Set([

this._parseImages(this._doc),

this._parseHrefs(this._doc),

this._parseEmbed(this._doc),

this._parseScripts(this._doc),

].flat())];
}
}