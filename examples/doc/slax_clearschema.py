# autogenerated by ssc-gen DO NOT_EDIT
"""main docstring example
ssc-gen transpiles it at the beginning of the file
"""

import re
from html import unescape as _html_unescape
from typing import List, Dict, TypedDict, Union, Optional
from contextlib import suppress
from functools import reduce


from selectolax.lexbor import LexborHTMLParser as HTMLParser, LexborNode as Node


_RE_HEX_ENTITY = re.compile(r"&#x([0-9a-fA-F]+);")
_RE_UNICODE_ENTITY = re.compile(r"\\\\u([0-9a-fA-F]{4})")
_RE_BYTES_ENTITY = re.compile(r"\\\\x([0-9a-fA-F]{2})")
_RE_CHARS_MAP = {
    "\\b": "\b",
    "\\f": "\f",
    "\\n": "\n",
    "\\r": "\r",
    "\\t": "\t",
}


def ssc_unescape(s: str) -> str:
    s = _html_unescape(s)
    s = _RE_HEX_ENTITY.sub(lambda m: chr(int(m.group(1), 16)), s)
    s = _RE_UNICODE_ENTITY.sub(lambda m: chr(int(m.group(1), 16)), s)
    s = _RE_BYTES_ENTITY.sub(lambda m: chr(int(m.group(1), 16)), s)
    
    return (
        s.replace("\\b", "\b")
        .replace("\\f", "\f")
        .replace("\\n", "\n")
        .replace("\\t", "\t")
    )


def ssc_map_replace(s: str, replacements: Dict[str, str]) -> str:
    return reduce(
        lambda acc, kv: acc.replace(kv[0], kv[1]), replacements.items(), s
    )


def ssc_rm_prefix(v: str, p: str) -> str:
    return v[len(p) :] if v.startswith(p) else v


def ssc_rm_suffix(v: str, s: str) -> str:
    return v[: -(len(s))] if v.endswith(s) else v


def ssc_rm_prefix_and_suffix(v: str, p: str, s: str) -> str:
    return ssc_rm_suffix(ssc_rm_prefix(v, p), s)


T_Contacts = TypedDict(
    "T_Contacts",
    {
        "phone": Optional[str],
        "email": Optional[str],
    },
)
T_HelloWorld = TypedDict(
    "T_HelloWorld",
    {
        "title": str,
        "a_hrefs": List[str],
        "contacts": T_Contacts,
    },
)


class Contacts:
    """Simple extract contacts from page by a[href] attribute. If field not founded - return None

        See also:
            https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/a#href


    {
        "phone": "String",
        "email": "String"
    }"""

    def __init__(self, document: Union[str, HTMLParser, Node]) -> None:
        self._document = (
            HTMLParser(document) if isinstance(document, str) else document
        )

    def _parse_phone(self, v: Union[HTMLParser, Node]) -> Optional[str]:
        v0 = v
        with suppress(Exception):
            v1 = v0.css_first('a[href^="tel:"]')
            
            return v1.attributes["href"]
        return None

    def _parse_email(self, v: Union[HTMLParser, Node]) -> Optional[str]:
        v0 = v
        with suppress(Exception):
            v1 = v0.css_first('a[href^="email:"]')
            
            return v1.attributes["href"]
        return None

    def parse(self) -> T_Contacts:
        return {
            "phone": self._parse_phone(self._document),
            "email": self._parse_email(self._document),
        }


class HelloWorld:
    """Example demonstration documentation schema usage.

        Usage:

            GET any html page

        Issues:

            If <a> tags in target page not exists, it throw error!


    {
        "title": "String",
        "a_hrefs": "Array<String>",
        "contacts": {
            "phone": "String | null",
            "email": "String | null"
        }
    }"""

    def __init__(self, document: Union[str, HTMLParser, Node]) -> None:
        self._document = (
            HTMLParser(document) if isinstance(document, str) else document
        )

    def _parse_title(self, v: Union[HTMLParser, Node]) -> str:
        v0 = v.css_first("title")
        
        return v0.text()

    def _parse_a_hrefs(self, v: Union[HTMLParser, Node]) -> List[str]:
        v0 = v.css("a")
        
        return [e.attributes["href"] for e in v0]

    def _parse_contacts(self, v: Union[HTMLParser, Node]) -> T_Contacts:
        
        return Contacts(v).parse()

    def parse(self) -> T_HelloWorld:
        return {
            "title": self._parse_title(self._document),
            "a_hrefs": self._parse_a_hrefs(self._document),
            "contacts": self._parse_contacts(self._document),
        }
