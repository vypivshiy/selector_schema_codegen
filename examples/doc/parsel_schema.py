# autogenerated by ssc-gen DO NOT_EDIT
"""main docstring example
ssc-gen transpiles it at the beginning of the file
"""

from typing import List, TypedDict, Union, Optional
from contextlib import suppress


from parsel import Selector, SelectorList

T_Contacts = TypedDict(
    "T_Contacts",
    {
        "phone": Optional[str],
        "email": Optional[str],
    },
)
T_HelloWorld = TypedDict(
    "T_HelloWorld",
    {
        "title": str,
        "a_hrefs": List[str],
        "contacts": T_Contacts,
    },
)


class Contacts:
    """Simple extract contacts from page by a[href] attribute. If field not founded - return None

        See also:
            https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/a#href


    {
        "phone": "String",
        "email": "String"
    }"""

    def __init__(self, document: Union[str, Selector, SelectorList]) -> None:
        self._document = (
            Selector(document) if isinstance(document, str) else document
        )

    def _parse_phone(self, v: Union[Selector, SelectorList]) -> Optional[str]:
        v0 = v
        with suppress(Exception):
            v1 = v0.css('a[href^="tel:"]')
            
            return v1.attrib["href"]
        return None

    def _parse_email(self, v: Union[Selector, SelectorList]) -> Optional[str]:
        v0 = v
        with suppress(Exception):
            v1 = v0.css('a[href^="email:"]')
            
            return v1.attrib["href"]
        return None

    def parse(self) -> T_Contacts:
        return {
            "phone": self._parse_phone(self._document),
            "email": self._parse_email(self._document),
        }


class HelloWorld:
    """Example demonstration documentation schema usage.

        Usage:

            GET any html page

        Issues:

            If <a> tags in target page not exists, it throw error!


    {
        "title": "String",
        "a_hrefs": "Array<String>",
        "contacts": {
            "phone": "String | null",
            "email": "String | null"
        }
    }"""

    def __init__(self, document: Union[str, Selector, SelectorList]) -> None:
        self._document = (
            Selector(document) if isinstance(document, str) else document
        )

    def _parse_title(self, v: Union[Selector, SelectorList]) -> str:
        v0 = v.css("title")
        
        return "".join(v0.css("::text").getall())

    def _parse_a_hrefs(self, v: Union[Selector, SelectorList]) -> List[str]:
        v0 = v.css("a")
        
        return [e.attrib["href"] for e in v0]

    def _parse_contacts(self, v: Union[Selector, SelectorList]) -> T_Contacts:
        
        return Contacts(v).parse()

    def parse(self) -> T_HelloWorld:
        return {
            "title": self._parse_title(self._document),
            "a_hrefs": self._parse_a_hrefs(self._document),
            "contacts": self._parse_contacts(self._document),
        }
