// autogenerated by ssc-gen DO NOT_EDIT
/***  main docstring example
 * ssc-gen transpiles it at the beginning of the file
 * */

function sscRmPrefix(v, p) {
    return v.startsWith(p) ? v.slice(p.length) : v;
}

function sscRmSuffix(v, s) {
    return v.endsWith(s) ? v.slice(0, -s.length) : v;
}

function sscRmPrefixSuffix(v, p, s) {
    return sscRmSuffix(sscRmPrefix(v, p), s);
}

/*** Simple extract contacts from page by a[href] attribute. If field not founded - return None
 *
 *     See also:
 *         https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/a#href
 *
 *
 * {
 *     "phone": "String",
 *     "email": "String"
 * }*/
class Contacts {
    constructor(doc) {
        if (typeof doc === 'string') {
            this._doc = new DOMParser().parseFromString(doc, 'text/html');
        } else if (doc instanceof Document || doc instanceof Element) {
            this._doc = doc.cloneNode(true);
        } else {
            throw new Error(
                'Invalid input: Expected a Document, Element, or string',
            );
        }
    }

    _parsePhone(v) {
        let v0 = v;
        try {
            let v1 = v0.querySelector('a[href^="tel:"]');

            return v1.getAttribute('href');
        } catch (Error) {
            return null;
        }
    }
    _parseEmail(v) {
        let v0 = v;
        try {
            let v1 = v0.querySelector('a[href^="email:"]');

            return v1.getAttribute('href');
        } catch (Error) {
            return null;
        }
    }
    parse() {
        return {
            phone: this._parsePhone(this._doc),

            email: this._parseEmail(this._doc),
        };
    }
}
/*** Example demonstration documentation schema usage.
 *
 *     Usage:
 *
 *         GET any html page
 *
 *     Issues:
 *
 *         If <a> tags in target page not exists, it throw error!
 *
 *
 * {
 *     "title": "String",
 *     "a_hrefs": "Array<String>",
 *     "contacts": {
 *         "phone": "String | null",
 *         "email": "String | null"
 *     }
 * }*/
class HelloWorld {
    constructor(doc) {
        if (typeof doc === 'string') {
            this._doc = new DOMParser().parseFromString(doc, 'text/html');
        } else if (doc instanceof Document || doc instanceof Element) {
            this._doc = doc.cloneNode(true);
        } else {
            throw new Error(
                'Invalid input: Expected a Document, Element, or string',
            );
        }
    }

    _parseTitle(v) {
        let v0 = v.querySelector('title');

        return typeof v0.textContent === 'undefined'
            ? v0.documentElement.textContent
            : v0.textContent;
    }
    _parseAHrefs(v) {
        let v0 = Array.from(v.querySelectorAll('a'));

        return v0.map((e) => e.getAttribute('href'));
    }
    _parseContacts(v) {
        return new Contacts(v).parse();
    }
    parse() {
        return {
            title: this._parseTitle(this._doc),

            a_hrefs: this._parseAHrefs(this._doc),

            contacts: this._parseContacts(this._doc),
        };
    }
}
