# autogenerated by ssc-gen DO NOT_EDIT
from __future__ import annotations
import re
from typing import List, TypedDict, Union
import sys

if sys.version_info >= (3, 10):
    from types import NoneType
else:
    NoneType = type(None)

from parsel import Selector
from parsel.selector import _SelectorType  # noqa

T_Main = TypedDict(
    "T_Main",
    {
        "item_sc": str,
        "a_href": str,
        "a_text": str,
        "var_int": int,
        "var_float": float,
        "var_list": List[str],
        "var_list_ints": List[int],
    },
)


class Main:
    """Hello, it my first docstring for useless synthetic html!

    USAGE:
        - pass index.html document from 1_basic folder



    {
        "item_sc": "String",
        "a_href": "String",
        "a_text": "String",
        "var_int": "Int",
        "var_float": "Float",
        "var_list": "Array<String>",
        "var_list_ints": "Array<Int>"
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = (
            Selector(document) if isinstance(document, str) else document
        )

    def _parse_item_sc(self, value: Selector) -> str:
        value1 = value.css(".item-sc > p")
        return "".join(value1.css("::text").getall())

    def _parse_a_href(self, value: Selector) -> str:
        value1 = value.css(".item-sc > a")
        value2 = value1.attrib["href"]
        return f"https://{value2}" if value2 else value2

    def _parse_a_text(self, value: Selector) -> str:
        value1 = value.css(".item-sc > a")
        value2 = "".join(value1.css("::text").getall())
        return value2.strip(" ")

    def _parse_var_int(self, value: Selector) -> int:
        value1 = value.css(".item-sc > #int-item")
        value2 = "".join(value1.css("::text").getall())
        return int(value2)

    def _parse_var_float(self, value: Selector) -> float:
        value1 = value.css(".item-sc > #float-item")
        value2 = "".join(value1.css("::text").getall())
        return float(value2)

    def _parse_var_list(self, value: Selector) -> List[str]:
        value1 = value.css(".item-sc > .list-items > li")
        return value1.css("::text").getall()

    def _parse_var_list_ints(self, value: Selector) -> List[int]:
        value1 = value.css(".item-sc > .list-items > li")
        value2 = value1.css("::text").getall()
        value3 = [re.sub("\\D+", "", e) for e in value2]
        return [int(i) for i in value3]

    def parse(self) -> T_Main:
        return {
            "item_sc": self._parse_item_sc(self._doc),
            "a_href": self._parse_a_href(self._doc),
            "a_text": self._parse_a_text(self._doc),
            "var_int": self._parse_var_int(self._doc),
            "var_float": self._parse_var_float(self._doc),
            "var_list": self._parse_var_list(self._doc),
            "var_list_ints": self._parse_var_list_ints(self._doc),
        }
