# autogenerated by ssc-gen DO NOT_EDIT
from __future__ import annotations
from typing import List, Dict, TypedDict, Union
import sys

if sys.version_info >= (3, 10):
    from types import NoneType
else:
    NoneType = type(None)

from parsel import Selector, SelectorList
from parsel.selector import _SelectorType  # noqa

T_ListGroup = TypedDict(
    "T_ListGroup",
    {
        "p_tag": str,
        "a_href": str,
    },
)
T_DictGroup = Dict[str, str]
T_FlatListGroup = List[str]
T_Main = TypedDict(
    "T_Main",
    {
        "list_group": List[T_ListGroup],
        "dict_group": T_DictGroup,
        "flat_list_group": T_FlatListGroup,
        "title": str,
    },
)


class ListGroup:
    """

    [
        {
            "p_tag": "String",
            "a_href": "String"
        },
        "..."
    ]"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = (
            Selector(document) if isinstance(document, str) else document
        )

    def _split_doc(self, value: _SelectorType) -> SelectorList:
        return value.css(".list-group > .item")

    def _parse_p_tag(self, value: Selector) -> str:
        value1 = value.css("p")
        return "".join(value1.css("::text").getall())

    def _parse_a_href(self, value: Selector) -> str:
        value1 = value.css("a")
        return value1.attrib["href"]

    def parse(self) -> List[T_ListGroup]:
        return [
            {"p_tag": self._parse_p_tag(e), "a_href": self._parse_a_href(e)}
            for e in self._split_doc(self._doc)
        ]


class DictGroup:
    """

    {
        "key1": "value1",
        "keyN": "valueN",
        "...": "..."
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = (
            Selector(document) if isinstance(document, str) else document
        )

    def _split_doc(self, value: _SelectorType) -> SelectorList:
        return value.css(".dict-group > li")

    def _parse_key(self, value: Selector) -> str:
        return value.attrib["class"]

    def _parse_value(self, value: Selector) -> str:
        return "".join(value.css("::text").getall())

    def parse(self) -> T_DictGroup:
        return {
            self._parse_key(e): self._parse_value(e)
            for e in self._split_doc(self._doc)
        }


class FlatListGroup:
    """

    [
        "item1",
        "itemN",
        "..."
    ]"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = (
            Selector(document) if isinstance(document, str) else document
        )

    def _split_doc(self, value: _SelectorType) -> SelectorList:
        return value.css(".flatlist-group > li")

    def _parse_item(self, value: Selector) -> str:
        return "".join(value.css("::text").getall())

    def parse(self) -> T_FlatListGroup:
        return [self._parse_item(e) for e in self._split_doc(self._doc)]


class Main:
    """

    {
        "list_group": [
            {
                "p_tag": "String",
                "a_href": "String"
            },
            "..."
        ],
        "dict_group": {
            "key1": "value1",
            "keyN": "valueN",
            "...": "..."
        },
        "flat_list_group": [
            "item1",
            "itemN",
            "..."
        ],
        "title": "String"
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = (
            Selector(document) if isinstance(document, str) else document
        )

    def _parse_list_group(self, value: Selector) -> List[T_ListGroup]:
        return ListGroup(value).parse()

    def _parse_dict_group(self, value: Selector) -> T_DictGroup:
        return DictGroup(value).parse()

    def _parse_flat_list_group(self, value: Selector) -> T_FlatListGroup:
        return FlatListGroup(value).parse()

    def _parse_title(self, value: Selector) -> str:
        value1 = value.css("title")
        return "".join(value1.css("::text").getall())

    def parse(self) -> T_Main:
        return {
            "list_group": self._parse_list_group(self._doc),
            "dict_group": self._parse_dict_group(self._doc),
            "flat_list_group": self._parse_flat_list_group(self._doc),
            "title": self._parse_title(self._doc),
        }
