# autogenerated by ssc-gen DO NOT_EDIT

import re
from html import unescape as _html_unescape
from typing import List, Dict, TypedDict, Union
from functools import reduce


from bs4 import BeautifulSoup, ResultSet, Tag  # noqa (for typing)


_RE_HEX_ENTITY = re.compile(r"&#x([0-9a-fA-F]+);")
_RE_UNICODE_ENTITY = re.compile(r"\\\\u([0-9a-fA-F]{4})")
_RE_BYTES_ENTITY = re.compile(r"\\\\x([0-9a-fA-F]{2})")
_RE_CHARS_MAP = {
    "\\b": "\b",
    "\\f": "\f",
    "\\n": "\n",
    "\\r": "\r",
    "\\t": "\t",
}


def ssc_unescape(s: str) -> str:
    s = _html_unescape(s)
    s = _RE_HEX_ENTITY.sub(lambda m: chr(int(m.group(1), 16)), s)
    s = _RE_UNICODE_ENTITY.sub(lambda m: chr(int(m.group(1), 16)), s)
    s = _RE_BYTES_ENTITY.sub(lambda m: chr(int(m.group(1), 16)), s)
    for ch, r in _RE_CHARS_MAP.items():
        s = s.replace(ch, r)
    return s


def ssc_map_replace(s: str, replacements: Dict[str, str]) -> str:
    return reduce(
        lambda acc, kv: acc.replace(kv[0], kv[1]), replacements.items(), s
    )


def ssc_rm_prefix(v: str, p: str) -> str:
    return v[len(p) :] if v.startswith(p) else v


def ssc_rm_suffix(v: str, s: str) -> str:
    return v[: -(len(s))] if v.endswith(s) else v


def ssc_rm_prefix_and_suffix(v: str, p: str, s: str) -> str:
    return ssc_rm_suffix(ssc_rm_prefix(v, p), s)


T_Main = TypedDict(
    "T_Main",
    {
        "title": str,
        "urls": List[str],
    },
)


class Main:
    """

    {
        "title": "String",
        "urls": "Array<String>"
    }"""

    def __init__(self, document: Union[bytes, str, BeautifulSoup, Tag]) -> None:
        self._document = (
            BeautifulSoup(document, "lxml")
            if isinstance(document, (str, bytes))
            else document
        )

    def _parse_title(self, v: Union[BeautifulSoup, Tag]) -> str:
        v0 = v.select_one("title")
        
        return v0.text

    def _parse_urls(self, v: Union[BeautifulSoup, Tag]) -> List[str]:
        v0 = v.select("a[href]")
        
        return [
            " ".join(e.get_attribute_list("href")) for e in v0 if e.get("href")
        ]

    def parse(self) -> T_Main:
        return {
            "title": self._parse_title(self._document),
            "urls": self._parse_urls(self._document),
        }
