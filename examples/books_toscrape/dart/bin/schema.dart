///
/// Auto generated code by selector_schema_codegen
///
/// id: books.to_scrape
/// name: books.to_scrape
/// author: vypivshiy
/// description:
///     books.toscrape selectors schema example
/// source: http://books.toscrape.com
/// tags:
///     shop, books, example
///
/// WARNING: Any manual changes made to this file will be lost when this
/// is run again. Do not edit this file unless you know what you are doing.
///
///

import 'dart:core';
import 'package:universal_html/html.dart' show Document;
import 'package:universal_html/parsing.dart' as html;

// TODO change dynamic to generic with String OR List<String>
typedef ParsedValue = Map<String, dynamic>;

class __BaseViewModel {
  final String document;
  late final Document selector;
  final Map<String, String> _aliases = {};
  final List<String> _viewKeys = [];
  final List<ParsedValue> _cachedResult = [];

  __BaseViewModel(this.document) {
    selector = html.parseHtmlDocument(document);
  }

  parse() {
    _preValidate(selector);
    _startParse();
    return this;
  }

  _preValidate(Document part) {}

  _startParse() {}

  // TODO typing better
  List<dynamic> _partDocument(dynamic part) {
    return [];
  }

  List<ParsedValue> view() {
    ParsedValue mapFields(ParsedValue result) {
      ParsedValue viewDict = {};
      for (String k in _viewKeys) {
        var v = result[k];
        if (v != null) {
          k = _aliases[k] ?? k;
          viewDict[k] = v;
        }
      }
      return viewDict;
    }

    if (_cachedResult.length == 1) {
      return [mapFields(_cachedResult[0])];
    }
    return _cachedResult.map(mapFields).toList();
  }
}

class BookCatalogue extends __BaseViewModel {
  /// parse books from catalogue
  ///
  /// view() elements signature:
  /// url <TEXT> - page url to product
  /// title <TEXT> - product title
  /// price <TEXT> - product price
  /// image <TEXT> - product image
  /// rating <TEXT> - product rating
  ///
  @override
  Map<String, String> get _aliases => {};
  @override
  List<String> get _viewKeys => ['url', 'title', 'price', 'image', 'rating'];
  BookCatalogue(super.document);

  @override
  _preValidate(Document part) {
    var val_0 = part.querySelector("title");
    String val_1 = val_0?.text ?? "";
    RegExp re_2 = RegExp(r"Books to Scrape - Sandbox");
    assert(re_2.firstMatch(val_1) != null);
  }

  @override
  List<dynamic> _partDocument(dynamic part) {
    _preValidate(selector);
    var val_0 = part.querySelectorAll(".col-lg-3");
    return val_0;
  }

  String _parseUrl(dynamic part) {
    // script signature:
// css    "h3 > a"
// attr   "href"
// format "https://books.toscrape.com/catalogue/{{}}"
//
    var val_0 = part.querySelector("h3 > a");
    String val_1 = val_0.attributes["href"];
    String val_2 = "https://books.toscrape.com/catalogue/$val_1";
    return val_2;
  }

  String _parseTitle(dynamic part) {
    // script signature:
// css  "h3 > a"
// attr "title"
//
    var val_0 = part.querySelector("h3 > a");
    String val_1 = val_0.attributes["title"];
    return val_1;
  }

  String _parsePrice(dynamic part) {
    // script signature:
// default "0"
// css     ".price_color"
// text
// lstrip  "£"
//
    try {
      var val_1 = part.querySelector(".price_color");
      String val_2 = val_1?.text ?? "";
      String val_3 = val_2.replaceFirst(RegExp(r'^£'), "");
      return val_3;
    } catch (e) {
      return "0";
    }
  }

  String _parseImage(dynamic part) {
    // script signature:
// css "img.thumbnail"
// attr "src"
// lstrip ".."
// format "https://books.toscrape.com{{}}"
//
    var val_0 = part.querySelector("img.thumbnail");
    String val_1 = val_0.attributes["src"];
    String val_2 = val_1.replaceFirst(RegExp(r'^\.\.'), "");
    String val_3 = "https://books.toscrape.com$val_2";
    return val_3;
  }

  String _parseRating(dynamic part) {
    // script signature:
// css ".star-rating"
// attr "class"
// lstrip "star-rating "
//
    var val_0 = part.querySelector(".star-rating");
    String val_1 = val_0.attributes["class"];
    String val_2 = val_1.replaceFirst(RegExp(r'^star-rating '), "");
    return val_2;
  }

  @override
  _startParse() {
    // clear cache
    _cachedResult.clear();
    for (var part in _partDocument(selector)) {
      _cachedResult.add({
        'url': _parseUrl(part),
        'title': _parseTitle(part),
        'price': _parsePrice(part),
        'image': _parseImage(part),
        'rating': _parseRating(part),
      });
    }
  }
}

class Book extends __BaseViewModel {
  /// Book from product page
  ///
  /// view() elements signature:
  /// description <TEXT> - product description
  /// title <TEXT> - product title
  /// price <TEXT> - product price
  /// upc <TEXT> - product UPC
  /// table_values <ARRAY> -
  /// table_keys <ARRAY> -
  ///
  @override
  Map<String, String> get _aliases => {};
  @override
  List<String> get _viewKeys =>
      ['title', 'description', 'price', 'upc', 'table_values', 'table_keys'];
  Book(super.document);

  @override
  _preValidate(Document part) {
    var val_0 = part.querySelector("title");
    String val_1 = val_0?.text ?? "";
    RegExp re_2 = RegExp(r"Books to Scrape - Sandbox");
    assert(re_2.firstMatch(val_1) != null);
  }

  @override
  List<dynamic> _partDocument(dynamic part) {
    _preValidate(selector);
    return [part];
  }

  String _parseDescription(dynamic part) {
    // script signature:
// css    "#product_description+ p"
// text
//
    var val_0 = part.querySelector("#product_description+ p");
    String val_1 = val_0?.text ?? "";
    return val_1;
  }

  String _parseTitle(dynamic part) {
    // script signature:
// css  "h1"
// text
//
    var val_0 = part.querySelector("h1");
    String val_1 = val_0?.text ?? "";
    return val_1;
  }

  String _parsePrice(dynamic part) {
    // script signature:
// default "0"
// css     ".product_main .price_color"
// text
//
    try {
      var val_1 = part.querySelector(".product_main .price_color");
      String val_2 = val_1?.text ?? "";
      return val_2;
    } catch (e) {
      return "0";
    }
  }

  String _parseUpc(dynamic part) {
    // script signature:
// css "tr:nth-child(1) td"
// text
//
    var val_0 = part.querySelector("tr:nth-child(1) td");
    String val_1 = val_0?.text ?? "";
    return val_1;
  }

  List<String> _parseTableValues(dynamic part) {
    // script signature:
// cssAll "tr > td"
// text
//
    var val_0 = part.querySelectorAll("tr > td");
    var val_1 = val_0.map((el) => el.text).toList();
    return val_1;
  }

  List<String> _parseTableKeys(dynamic part) {
    // script signature:
// cssAll "tr"
// text
//
    var val_0 = part.querySelectorAll("tr");
    var val_1 = val_0.map((el) => el.text).toList();
    return val_1;
  }

  @override
  _startParse() {
    // clear cache
    _cachedResult.clear();
    for (var part in _partDocument(selector)) {
      _cachedResult.add({
        'description': _parseDescription(part),
        'title': _parseTitle(part),
        'price': _parsePrice(part),
        'upc': _parseUpc(part),
        'table_values': _parseTableValues(part),
        'table_keys': _parseTableKeys(part),
      });
    }
  }
}
