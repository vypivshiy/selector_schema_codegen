"""Auto generated code by selector_schema_codegen

id: books.to_scrape
name: books.to_scrape
author: vypivshiy
description:
    books.toscrape selectors schema example
source: http://books.toscrape.com
tags:
    shop, books, example

WARNING: Any manual changes made to this file will be lost when this
is run again. Do not edit this file unless you know what you are doing.
"""

from __future__ import annotations  # python 3.7, 3.8 typing comp
from typing import Any
import re

from parsel import Selector, SelectorList


class __BaseViewModel:
    def __init__(self, document: str):
        self.__raw__ = document
        self.__selector__ = Selector(document)
        self._cached_result: list[dict[str, Any]] = []
        self._aliases = {}
        self._view_keys = []

    @staticmethod
    def _pre_validate(doc):
        pass

    def _start_parse(self):
        pass

    def _part_document(self, part: Selector):
        pass

    def parse(self):
        self._pre_validate(self.__selector__)
        self._start_parse()
        return self

    def view(self) -> list[dict[str, list[str] | str]]:
        def map_fields(result):
            view_dict = {}
            for k in self._view_keys:
                if v := result.get(k):
                    k = self._aliases.get(k, k)
                    view_dict[k] = v
            return view_dict

        if len(self._cached_result) == 1:
            return [map_fields(self._cached_result[0])]
        return [map_fields(result) for result in self._cached_result]


class BookCatalogue(__BaseViewModel):
    """
    parse books from catalogue

    view() elements signature:

        url <TEXT> - page url to product

        title <TEXT> - product title

        price <TEXT> - product price

        image <TEXT> - product image

        rating <TEXT> - product rating


    """

    def __init__(self, document: str):
        super().__init__(document)
        self._aliases = {}
        self._view_keys = ["url", "title", "price", "image", "rating"]

    @staticmethod
    def _pre_validate(part: Selector):
        val_0 = part.css("title")
        val_1 = val_0.xpath("./text()").get()
        assert re.search(r"Books to Scrape - Sandbox", val_1)

    def _part_document(self, part: Selector):
        val_0 = part.css(".col-lg-3")
        return val_0

    @staticmethod
    def _parse_url(part: Selector) -> str:
        # script signature:
        # css    "h3 > a"
        # attr   "href"
        # format "https://books.toscrape.com/catalogue/{{}}"
        #
        val_0 = part.css("h3 > a")
        val_1 = val_0.attrib["href"]
        val_2 = "https://books.toscrape.com/catalogue/{}".format(val_1)
        return val_2

    @staticmethod
    def _parse_title(part: Selector) -> str:
        # script signature:
        # css  "h3 > a"
        # attr "title"
        #
        val_0 = part.css("h3 > a")
        val_1 = val_0.attrib["title"]
        return val_1

    @staticmethod
    def _parse_price(part: Selector) -> str:
        # script signature:
        # default "0"
        # css     ".price_color"
        # text
        # lstrip  "£"
        #
        try:
            val_1 = part.css(".price_color")
            val_2 = val_1.xpath("./text()").get()
            val_3 = val_2.lstrip("£")
            return val_3

        except Exception:
            return "0"

    @staticmethod
    def _parse_image(part: Selector) -> str:
        # script signature:
        # css "img.thumbnail"
        # attr "src"
        # lstrip ".."
        # format "https://books.toscrape.com{{}}"
        #
        val_0 = part.css("img.thumbnail")
        val_1 = val_0.attrib["src"]
        val_2 = val_1.lstrip("..")
        val_3 = "https://books.toscrape.com{}".format(val_2)
        return val_3

    @staticmethod
    def _parse_rating(part: Selector) -> str:
        # script signature:
        # css ".star-rating"
        # attr "class"
        # lstrip "star-rating "
        #
        val_0 = part.css(".star-rating")
        val_1 = val_0.attrib["class"]
        val_2 = val_1.lstrip("star-rating ")
        return val_2

    def _start_parse(self):
        # clear cache
        self._cached_result.clear()
        for part in self._part_document(self.__selector__):
            self._cached_result.append(
                {
                    "url": self._parse_url(part),
                    "title": self._parse_title(part),
                    "price": self._parse_price(part),
                    "image": self._parse_image(part),
                    "rating": self._parse_rating(part),
                }
            )


class Book(__BaseViewModel):
    """
    Book from product page

    view() elements signature:

        description <TEXT> - product description

        title <TEXT> - product title

        price <TEXT> - product price

        upc <TEXT> - product UPC

        table_values <ARRAY> -

        table_keys <ARRAY> -


    """

    def __init__(self, document: str):
        super().__init__(document)
        self._aliases = {}
        self._view_keys = [
            "title",
            "description",
            "price",
            "upc",
            "table_values",
            "table_keys",
        ]

    @staticmethod
    def _pre_validate(part: Selector):
        val_0 = part.css("title")
        val_1 = val_0.xpath("./text()").get()
        assert re.search(r"Books to Scrape - Sandbox", val_1)

    def _part_document(self, part: Selector):
        return [part]

    @staticmethod
    def _parse_description(part: Selector) -> str:
        # script signature:
        # css    "#product_description+ p"
        # text
        #
        val_0 = part.css("#product_description+ p")
        val_1 = val_0.xpath("./text()").get()
        return val_1

    @staticmethod
    def _parse_title(part: Selector) -> str:
        # script signature:
        # css  "h1"
        # text
        #
        val_0 = part.css("h1")
        val_1 = val_0.xpath("./text()").get()
        return val_1

    @staticmethod
    def _parse_price(part: Selector) -> str:
        # script signature:
        # default "0"
        # css     ".product_main .price_color"
        # text
        #
        try:
            val_1 = part.css(".product_main .price_color")
            val_2 = val_1.xpath("./text()").get()
            return val_2

        except Exception:
            return "0"

    @staticmethod
    def _parse_upc(part: Selector) -> str:
        # script signature:
        # css "tr:nth-child(1) td"
        # text
        #
        val_0 = part.css("tr:nth-child(1) td")
        val_1 = val_0.xpath("./text()").get()
        return val_1

    @staticmethod
    def _parse_table_values(part: Selector) -> list[str]:
        # script signature:
        # cssAll "tr > td"
        # text
        #
        val_0 = part.css("tr > td")
        val_1 = val_0.xpath("./text()").getall()
        return val_1

    @staticmethod
    def _parse_table_keys(part: Selector) -> list[str]:
        # script signature:
        # cssAll "tr"
        # text
        #
        val_0 = part.css("tr")
        val_1 = val_0.xpath("./text()").getall()
        return val_1

    def _start_parse(self):
        # clear cache
        self._cached_result.clear()
        for part in self._part_document(self.__selector__):
            self._cached_result.append(
                {
                    "description": self._parse_description(part),
                    "title": self._parse_title(part),
                    "price": self._parse_price(part),
                    "upc": self._parse_upc(part),
                    "table_values": self._parse_table_values(part),
                    "table_keys": self._parse_table_keys(part),
                }
            )
