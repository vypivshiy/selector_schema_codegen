"""Auto generated code by selector_schema_codegen

id: books.to_scrape
name: books.to_scrape
author: vypivshiy
description:
    books.toscrape selectors schema example
source: http://books.toscrape.com
tags:
    shop, books, example

WARNING: Any manual changes made to this file will be lost when this
is run again. Do not edit this file unless you know what you are doing.
"""

import re
from typing import Any

from parsel import Selector


class BookCatalogue:
    """
    parse books from catalogue

    view() elements signature:

        url <TEXT> - page url to product

        title <TEXT> - product title

        price <TEXT> - product price

        image <TEXT> - product image

        rating <TEXT> - product rating


    """

    def __init__(self, document: str):
        self.__raw__ = document
        self.__selector__ = Selector(document)
        self.__aliases = {}
        self.__view_keys = ["url", "title", "price", "image", "rating"]
        self.__cached_result: list[dict[str, Any]] = []

    def parse(self):
        self.__pre_validate(self.__selector__)
        self.__start_parse()

    @staticmethod
    def __pre_validate(part: Selector):
        val_0 = part.css("title")
        val_1 = val_0.xpath("./text()").get()
        assert re.search(r"Books to Scrape - Sandbox", val_1)

    def __part_document(self, part: Selector):
        self.__pre_validate(self.__selector__)
        val_0 = part.css(".col-lg-3")
        return val_0

    @staticmethod
    def __parse_url(part: Selector):
        val_0 = part.css("h3 > a")
        val_1 = val_0.attrib["href"]
        val_2 = "https://books.toscrape.com/catalogue/{}".format(val_1)
        return val_2

    @staticmethod
    def __parse_title(part: Selector):
        val_0 = part.css("h3 > a")
        val_1 = val_0.attrib["title"]
        return val_1

    @staticmethod
    def __parse_price(part: Selector):
        try:
            val_1 = part.css(".price_color")
            val_2 = val_1.xpath("./text()").get()
            val_3 = val_2.lstrip("£")
            return val_3

        except Exception:
            return "0"

    @staticmethod
    def __parse_image(part: Selector):
        val_0 = part.css("img.thumbnail")
        val_1 = val_0.attrib["src"]
        val_2 = val_1.lstrip("..")
        val_3 = "https://books.toscrape.com{}".format(val_2)
        return val_3

    @staticmethod
    def __parse_rating(part: Selector):
        val_0 = part.css(".star-rating")
        val_1 = val_0.attrib["class"]
        val_2 = val_1.lstrip("star-rating ")
        return val_2

    def __start_parse(self):
        # clear cache
        self.__cached_result.clear()
        for part in self.__part_document(self.__selector__):
            self.__cached_result.append(
                {
                    "url": self.__parse_url(part),
                    "title": self.__parse_title(part),
                    "price": self.__parse_price(part),
                    "image": self.__parse_image(part),
                    "rating": self.__parse_rating(part),
                }
            )

    def view(self) -> list[dict[str, Any]]:
        def map_fields(result):
            view_dict = {}
            for k in self.__view_keys:
                if v := result.get(k):
                    k = self.__aliases.get(k, k)
                    view_dict[k] = v
            return view_dict

        if len(self.__cached_result) == 1:
            return [map_fields(self.__cached_result[0])]
        return [map_fields(result) for result in self.__cached_result]


class Book:
    """
    Book from product page

    view() elements signature:

        description <TEXT> - product description

        title <TEXT> - product title

        price <TEXT> - product price

        upc <TEXT> - product UPC


    """

    def __init__(self, document: str):
        self.__raw__ = document
        self.__selector__ = Selector(document)
        self.__aliases = {}
        self.__view_keys = ["title", "description", "price", "upc"]
        self.__cached_result: list[dict[str, Any]] = []

    def parse(self):
        self.__pre_validate(self.__selector__)
        self.__start_parse()

    @staticmethod
    def __pre_validate(part: Selector):
        val_0 = part.css("title")
        val_1 = val_0.xpath("./text()").get()
        assert re.search(r"Books to Scrape - Sandbox", val_1)

    def __part_document(self, part: Selector):
        self.__pre_validate(self.__selector__)
        return [part]

    @staticmethod
    def __parse_description(part: Selector):
        val_0 = part.css("#product_description+ p")
        val_1 = val_0.xpath("./text()").get()
        return val_1

    @staticmethod
    def __parse_title(part: Selector):
        val_0 = part.css("h1")
        val_1 = val_0.xpath("./text()").get()
        return val_1

    @staticmethod
    def __parse_price(part: Selector):
        try:
            val_1 = part.css(".product_main .price_color")
            val_2 = val_1.xpath("./text()").get()
            val_3 = val_2.lstrip("£")
            return val_3

        except Exception:
            return "0"

    @staticmethod
    def __parse_upc(part: Selector):
        val_0 = part.css("tr:nth-child(1) td")
        val_1 = val_0.xpath("./text()").get()
        return val_1

    def __start_parse(self):
        # clear cache
        self.__cached_result.clear()
        for part in self.__part_document(self.__selector__):
            self.__cached_result.append(
                {
                    "description": self.__parse_description(part),
                    "title": self.__parse_title(part),
                    "price": self.__parse_price(part),
                    "upc": self.__parse_upc(part),
                }
            )

    def view(self) -> list[dict[str, Any]]:
        def map_fields(result):
            view_dict = {}
            for k in self.__view_keys:
                if v := result.get(k):
                    k = self.__aliases.get(k, k)
                    view_dict[k] = v
            return view_dict

        if len(self.__cached_result) == 1:
            return [map_fields(self.__cached_result[0])]
        return [map_fields(result) for result in self.__cached_result]
