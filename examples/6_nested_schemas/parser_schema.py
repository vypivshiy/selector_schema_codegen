# autogenerated by ssc-gen DO NOT_EDIT
from __future__ import annotations
from typing import List, TypedDict, Union
import sys

if sys.version_info >= (3, 10):
    from types import NoneType
else:
    NoneType = type(None)

from parsel import Selector
from parsel.selector import _SelectorType  # noqa

T_Item4 = TypedDict(
    "T_Item4",
    {
        "items": List[str],
    },
)
T_Item3 = TypedDict(
    "T_Item3",
    {
        "items": List[str],
        "b_text": str,
    },
)
T_Item2 = TypedDict(
    "T_Item2",
    {
        "items": List[str],
        "href": str,
    },
)
T_Item1 = TypedDict(
    "T_Item1",
    {
        "items": List[str],
        "href": str,
    },
)
T_ItemRec3 = TypedDict(
    "T_ItemRec3",
    {
        "item_rec4": T_Item4,
        "items": List[str],
        "b_text": str,
    },
)
T_ItemRec2 = TypedDict(
    "T_ItemRec2",
    {
        "item_rec3": T_ItemRec3,
        "items": List[str],
        "href": str,
    },
)
T_ItemRec1 = TypedDict(
    "T_ItemRec1",
    {
        "item_rec2": T_ItemRec2,
        "items": List[str],
        "href": str,
    },
)
T_Main = TypedDict(
    "T_Main",
    {
        "multi_nested": T_ItemRec1,
        "item1": T_Item1,
        "item2": T_Item2,
        "item3": T_Item3,
        "item4": T_Item4,
    },
)


class Item4:
    """

    {
        "items": "Array<String>"
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = (
            Selector(document) if isinstance(document, str) else document
        )

    def _parse_items(self, value: Selector) -> List[str]:
        value1 = value.css(".item4 > .item-value")
        return value1.css("::text").getall()

    def parse(self) -> T_Item4:
        return {"items": self._parse_items(self._doc)}


class Item3:
    """

    {
        "items": "Array<String>",
        "b_text": "String"
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = (
            Selector(document) if isinstance(document, str) else document
        )

    def _parse_items(self, value: Selector) -> List[str]:
        value1 = value.css(".item3 > .item-value")
        return value1.css("::text").getall()

    def _parse_b_text(self, value: Selector) -> str:
        value1 = value.css(".item3 > b")
        return "".join(value1.css("::text").getall())

    def parse(self) -> T_Item3:
        return {
            "items": self._parse_items(self._doc),
            "b_text": self._parse_b_text(self._doc),
        }


class Item2:
    """

    {
        "items": "Array<String>",
        "href": "String"
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = (
            Selector(document) if isinstance(document, str) else document
        )

    def _parse_items(self, value: Selector) -> List[str]:
        value1 = value.css(".item2 > .item-value")
        return value1.css("::text").getall()

    def _parse_href(self, value: Selector) -> str:
        value1 = value.css(".item2 > a")
        return value1.attrib["href"]

    def parse(self) -> T_Item2:
        return {
            "items": self._parse_items(self._doc),
            "href": self._parse_href(self._doc),
        }


class Item1:
    """

    {
        "items": "Array<String>",
        "href": "String"
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = (
            Selector(document) if isinstance(document, str) else document
        )

    def _parse_items(self, value: Selector) -> List[str]:
        value1 = value.css(".item > .item-value")
        return value1.css("::text").getall()

    def _parse_href(self, value: Selector) -> str:
        value1 = value.css(".item > a")
        return value1.attrib["href"]

    def parse(self) -> T_Item1:
        return {
            "items": self._parse_items(self._doc),
            "href": self._parse_href(self._doc),
        }


class ItemRec3:
    """

    {
        "item_rec4": {
            "items": "Array<String>"
        },
        "items": "Array<String>",
        "b_text": "String"
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = (
            Selector(document) if isinstance(document, str) else document
        )

    def _parse_item_rec4(self, value: Selector) -> T_Item4:
        value1 = value.css(".item4")
        return Item4(value1).parse()

    def _parse_items(self, value: Selector) -> List[str]:
        value1 = value.css(".item3 > .item-value")
        return value1.css("::text").getall()

    def _parse_b_text(self, value: Selector) -> str:
        value1 = value.css(".item3 > b")
        return "".join(value1.css("::text").getall())

    def parse(self) -> T_ItemRec3:
        return {
            "item_rec4": self._parse_item_rec4(self._doc),
            "items": self._parse_items(self._doc),
            "b_text": self._parse_b_text(self._doc),
        }


class ItemRec2:
    """

    {
        "item_rec3": {
            "item_rec4": {
                "items": "Array<String>"
            },
            "items": "Array<String>",
            "b_text": "String"
        },
        "items": "Array<String>",
        "href": "String"
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = (
            Selector(document) if isinstance(document, str) else document
        )

    def _parse_item_rec3(self, value: Selector) -> T_ItemRec3:
        value1 = value.css(".item3")
        return ItemRec3(value1).parse()

    def _parse_items(self, value: Selector) -> List[str]:
        value1 = value.css(".item2 > .item-value")
        return value1.css("::text").getall()

    def _parse_href(self, value: Selector) -> str:
        value1 = value.css(".item2 > a")
        return value1.attrib["href"]

    def parse(self) -> T_ItemRec2:
        return {
            "item_rec3": self._parse_item_rec3(self._doc),
            "items": self._parse_items(self._doc),
            "href": self._parse_href(self._doc),
        }


class ItemRec1:
    """

    {
        "item_rec2": {
            "item_rec3": {
                "item_rec4": {
                    "items": "Array<String>"
                },
                "items": "Array<String>",
                "b_text": "String"
            },
            "items": "Array<String>",
            "href": "String"
        },
        "items": "Array<String>",
        "href": "String"
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = (
            Selector(document) if isinstance(document, str) else document
        )

    def _parse_item_rec2(self, value: Selector) -> T_ItemRec2:
        value1 = value.css(".item2")
        return ItemRec2(value1).parse()

    def _parse_items(self, value: Selector) -> List[str]:
        value1 = value.css(".item > .item-value")
        return value1.css("::text").getall()

    def _parse_href(self, value: Selector) -> str:
        value1 = value.css(".item > a")
        return value1.attrib["href"]

    def parse(self) -> T_ItemRec1:
        return {
            "item_rec2": self._parse_item_rec2(self._doc),
            "items": self._parse_items(self._doc),
            "href": self._parse_href(self._doc),
        }


class Main:
    """

    {
        "multi_nested": {
            "item_rec2": {
                "item_rec3": {
                    "item_rec4": {
                        "items": "Array<String>"
                    },
                    "items": "Array<String>",
                    "b_text": "String"
                },
                "items": "Array<String>",
                "href": "String"
            },
            "items": "Array<String>",
            "href": "String"
        },
        "item1": {
            "items": "Array<String>",
            "href": "String"
        },
        "item2": {
            "items": "Array<String>",
            "href": "String"
        },
        "item3": {
            "items": "Array<String>",
            "b_text": "String"
        },
        "item4": {
            "items": "Array<String>"
        }
    }"""

    def __init__(self, document: Union[str, _SelectorType]) -> None:
        self._doc = (
            Selector(document) if isinstance(document, str) else document
        )

    def _parse_multi_nested(self, value: Selector) -> T_ItemRec1:
        value1 = value.css(".main > .item")
        return ItemRec1(value1).parse()

    def _parse_item1(self, value: Selector) -> T_Item1:
        value1 = value.css(".item")
        return Item1(value1).parse()

    def _parse_item2(self, value: Selector) -> T_Item2:
        value1 = value.css(".item2")
        return Item2(value1).parse()

    def _parse_item3(self, value: Selector) -> T_Item3:
        value1 = value.css(".item3")
        return Item3(value1).parse()

    def _parse_item4(self, value: Selector) -> T_Item4:
        value1 = value.css(".item4")
        return Item4(value1).parse()

    def parse(self) -> T_Main:
        return {
            "multi_nested": self._parse_multi_nested(self._doc),
            "item1": self._parse_item1(self._doc),
            "item2": self._parse_item2(self._doc),
            "item3": self._parse_item3(self._doc),
            "item4": self._parse_item4(self._doc),
        }
